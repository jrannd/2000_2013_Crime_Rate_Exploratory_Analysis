{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM9Ix5VRw8KKrx5wZpmsEya",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jrannd/2000_2013_Crime_Rate_Exploratory_Analysis/blob/main/Colab%20and%20visual%20view\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Crime Rate in California 2000-2013 per 1,000"
      ],
      "metadata": {
        "id": "SWkRdO_c9pa0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Load data"
      ],
      "metadata": {
        "id": "nZY_j3Fj91Tz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import pandas as pd\n",
        "import io\n",
        "\n",
        "url = 'https://data.chhs.ca.gov/dataset/99bc1fea-c55c-4377-bad8-f00832fd195d/resource/bc09f211-200c-4c4c-aa13-d2e89c0d5577/download/hci_crime_752_pl_co_re_ca_2000-2013_21oct15-ada.xlsx'\n",
        "\n",
        "response = requests.get(url)\n",
        "\n",
        "response.raise_for_status()\n",
        "df = pd.read_excel(io.BytesIO(response.content))\n",
        "\n"
      ],
      "metadata": {
        "id": "Z_Kqgi8IzQg8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# create back up of original df before we work on it\n",
        "\n",
        "df_original = df.copy()"
      ],
      "metadata": {
        "id": "EfSDQ57FGMRu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "id": "aeyNJYXi5svE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d1810064-db55-4ffb-dc49-2c578d2279e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['ind_id', 'ind_definition', 'reportyear', 'race_eth_code',\n",
              "       'race_eth_name', 'geotype', 'geotypevalue', 'geoname', 'county_fips',\n",
              "       'county_name', 'region_code', 'region_name', 'strata_name_code',\n",
              "       'strata_name', 'strata_level_name_code', 'strata_level_name',\n",
              "       'numerator', 'denominator', 'rate', 'll_95ci', 'ul_95ci', 'se', 'rse',\n",
              "       'ca_decile', 'ca_rr', 'dof_population', 'version'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "id": "AZiJ3wqj_3Ei",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cbd2758a-a7a2-45da-9a81-0e0024ff82e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 49227 entries, 0 to 49226\n",
            "Data columns (total 27 columns):\n",
            " #   Column                  Non-Null Count  Dtype         \n",
            "---  ------                  --------------  -----         \n",
            " 0   ind_id                  49227 non-null  object        \n",
            " 1   ind_definition          49226 non-null  object        \n",
            " 2   reportyear              49226 non-null  float64       \n",
            " 3   race_eth_code           49226 non-null  float64       \n",
            " 4   race_eth_name           49226 non-null  object        \n",
            " 5   geotype                 49226 non-null  object        \n",
            " 6   geotypevalue            49226 non-null  float64       \n",
            " 7   geoname                 49226 non-null  object        \n",
            " 8   county_fips             48176 non-null  float64       \n",
            " 9   county_name             48176 non-null  object        \n",
            " 10  region_code             49156 non-null  float64       \n",
            " 11  region_name             49156 non-null  object        \n",
            " 12  strata_name_code        49226 non-null  float64       \n",
            " 13  strata_name             49226 non-null  object        \n",
            " 14  strata_level_name_code  49226 non-null  float64       \n",
            " 15  strata_level_name       49226 non-null  object        \n",
            " 16  numerator               32293 non-null  float64       \n",
            " 17  denominator             37090 non-null  float64       \n",
            " 18  rate                    7323 non-null   float64       \n",
            " 19  ll_95ci                 7323 non-null   float64       \n",
            " 20  ul_95ci                 7323 non-null   float64       \n",
            " 21  se                      7323 non-null   float64       \n",
            " 22  rse                     7323 non-null   float64       \n",
            " 23  ca_decile               6301 non-null   float64       \n",
            " 24  ca_rr                   7323 non-null   float64       \n",
            " 25  dof_population          38660 non-null  float64       \n",
            " 26  version                 49226 non-null  datetime64[ns]\n",
            "dtypes: datetime64[ns](1), float64(17), object(9)\n",
            "memory usage: 10.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "id": "qO9sKiwD_28v",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "9fd9a7cc-0f7e-4728-ab7b-0247cc4bb3b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         reportyear  race_eth_code  geotypevalue   county_fips   region_code  \\\n",
              "count  49226.000000        49226.0  49226.000000  48176.000000  49156.000000   \n",
              "mean    2006.677711            9.0  39054.299923   6056.460561      8.396778   \n",
              "min     2000.000000            9.0      1.000000   6001.000000      1.000000   \n",
              "25%     2003.000000            9.0  13588.000000   6037.000000      4.000000   \n",
              "50%     2007.000000            9.0  39304.000000   6059.000000     10.000000   \n",
              "75%     2010.000000            9.0  60242.000000   6081.000000     14.000000   \n",
              "max     2013.000000            9.0  87090.000000   6115.000000     14.000000   \n",
              "std        4.070900            0.0  26562.720267     29.845061      4.951046   \n",
              "\n",
              "       strata_name_code  strata_level_name_code      numerator   denominator  \\\n",
              "count           49226.0            49226.000000   32293.000000  3.709000e+04   \n",
              "mean                1.0                3.619551     618.156133  2.617145e+05   \n",
              "min                 1.0                1.000000       1.000000  9.000000e+01   \n",
              "25%                 1.0                2.000000       6.000000  1.306600e+04   \n",
              "50%                 1.0                4.000000      32.000000  3.624850e+04   \n",
              "75%                 1.0                5.000000     131.000000  8.618700e+04   \n",
              "max                 1.0                6.000000  212831.000000  3.829036e+07   \n",
              "std                 0.0                1.749811    5805.419986  1.862013e+06   \n",
              "\n",
              "              rate      ll_95ci      ul_95ci           se          rse  \\\n",
              "count  7323.000000  7323.000000  7323.000000  7323.000000  7323.000000   \n",
              "mean      5.441245     4.300735     6.595281     0.588794    13.862678   \n",
              "min       0.024739     0.000000     0.059025     0.010168     0.216762   \n",
              "25%       2.040464     1.371024     2.635719     0.180475     5.407381   \n",
              "50%       3.512293     2.789873     4.194440     0.283291     9.245003   \n",
              "75%       5.412932     4.632967     6.276140     0.479669    16.222142   \n",
              "max     795.698925   614.402607   976.995242    92.498121   100.000000   \n",
              "std      25.442077    19.025128    31.936615     3.373453    15.080420   \n",
              "\n",
              "         ca_decile        ca_rr  dof_population                        version  \n",
              "count  6301.000000  7323.000000    3.866000e+04                          49226  \n",
              "mean      5.501349     1.064389    2.514599e+05  2015-10-21 11:57:29.355421952  \n",
              "min       1.000000     0.004288    0.000000e+00            2015-10-21 11:57:16  \n",
              "25%       3.000000     0.400511    1.186400e+04            2015-10-21 11:57:22  \n",
              "50%       6.000000     0.689796    3.449700e+04            2015-10-21 11:57:30  \n",
              "75%       8.000000     1.065014    8.383200e+04            2015-10-21 11:57:36  \n",
              "max      10.000000   128.906972    3.819386e+07            2015-10-21 11:57:42  \n",
              "std       2.868860     4.755626    1.820102e+06                            NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-16312e85-19d9-43d8-af9a-76a1e2dbe55e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>region_code</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "      <th>version</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>49226.000000</td>\n",
              "      <td>49226.0</td>\n",
              "      <td>49226.000000</td>\n",
              "      <td>48176.000000</td>\n",
              "      <td>49156.000000</td>\n",
              "      <td>49226.0</td>\n",
              "      <td>49226.000000</td>\n",
              "      <td>32293.000000</td>\n",
              "      <td>3.709000e+04</td>\n",
              "      <td>7323.000000</td>\n",
              "      <td>7323.000000</td>\n",
              "      <td>7323.000000</td>\n",
              "      <td>7323.000000</td>\n",
              "      <td>7323.000000</td>\n",
              "      <td>6301.000000</td>\n",
              "      <td>7323.000000</td>\n",
              "      <td>3.866000e+04</td>\n",
              "      <td>49226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2006.677711</td>\n",
              "      <td>9.0</td>\n",
              "      <td>39054.299923</td>\n",
              "      <td>6056.460561</td>\n",
              "      <td>8.396778</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.619551</td>\n",
              "      <td>618.156133</td>\n",
              "      <td>2.617145e+05</td>\n",
              "      <td>5.441245</td>\n",
              "      <td>4.300735</td>\n",
              "      <td>6.595281</td>\n",
              "      <td>0.588794</td>\n",
              "      <td>13.862678</td>\n",
              "      <td>5.501349</td>\n",
              "      <td>1.064389</td>\n",
              "      <td>2.514599e+05</td>\n",
              "      <td>2015-10-21 11:57:29.355421952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2000.000000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6001.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>9.000000e+01</td>\n",
              "      <td>0.024739</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.059025</td>\n",
              "      <td>0.010168</td>\n",
              "      <td>0.216762</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.004288</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>2015-10-21 11:57:16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2003.000000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>13588.000000</td>\n",
              "      <td>6037.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.306600e+04</td>\n",
              "      <td>2.040464</td>\n",
              "      <td>1.371024</td>\n",
              "      <td>2.635719</td>\n",
              "      <td>0.180475</td>\n",
              "      <td>5.407381</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.400511</td>\n",
              "      <td>1.186400e+04</td>\n",
              "      <td>2015-10-21 11:57:22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2007.000000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>39304.000000</td>\n",
              "      <td>6059.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>3.624850e+04</td>\n",
              "      <td>3.512293</td>\n",
              "      <td>2.789873</td>\n",
              "      <td>4.194440</td>\n",
              "      <td>0.283291</td>\n",
              "      <td>9.245003</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.689796</td>\n",
              "      <td>3.449700e+04</td>\n",
              "      <td>2015-10-21 11:57:30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2010.000000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>60242.000000</td>\n",
              "      <td>6081.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>131.000000</td>\n",
              "      <td>8.618700e+04</td>\n",
              "      <td>5.412932</td>\n",
              "      <td>4.632967</td>\n",
              "      <td>6.276140</td>\n",
              "      <td>0.479669</td>\n",
              "      <td>16.222142</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>1.065014</td>\n",
              "      <td>8.383200e+04</td>\n",
              "      <td>2015-10-21 11:57:36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2013.000000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>87090.000000</td>\n",
              "      <td>6115.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>212831.000000</td>\n",
              "      <td>3.829036e+07</td>\n",
              "      <td>795.698925</td>\n",
              "      <td>614.402607</td>\n",
              "      <td>976.995242</td>\n",
              "      <td>92.498121</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>128.906972</td>\n",
              "      <td>3.819386e+07</td>\n",
              "      <td>2015-10-21 11:57:42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>4.070900</td>\n",
              "      <td>0.0</td>\n",
              "      <td>26562.720267</td>\n",
              "      <td>29.845061</td>\n",
              "      <td>4.951046</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.749811</td>\n",
              "      <td>5805.419986</td>\n",
              "      <td>1.862013e+06</td>\n",
              "      <td>25.442077</td>\n",
              "      <td>19.025128</td>\n",
              "      <td>31.936615</td>\n",
              "      <td>3.373453</td>\n",
              "      <td>15.080420</td>\n",
              "      <td>2.868860</td>\n",
              "      <td>4.755626</td>\n",
              "      <td>1.820102e+06</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16312e85-19d9-43d8-af9a-76a1e2dbe55e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-16312e85-19d9-43d8-af9a-76a1e2dbe55e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-16312e85-19d9-43d8-af9a-76a1e2dbe55e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8c2a99ec-f920-4092-8839-34f38bf40a8d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8c2a99ec-f920-4092-8839-34f38bf40a8d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8c2a99ec-f920-4092-8839-34f38bf40a8d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"reportyear\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16810.330213255314,\n        \"min\": 4.070900049277779,\n        \"max\": 49226.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2006.6777109657498,\n          2010.0,\n          49226.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race_eth_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17401.2920784636,\n        \"min\": 0.0,\n        \"max\": 49226.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          49226.0,\n          9.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotypevalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27225.875778026402,\n        \"min\": 1.0,\n        \"max\": 87090.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          39054.299922805025,\n          60242.0,\n          49226.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_fips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15341.11774029062,\n        \"min\": 29.845060913878473,\n        \"max\": 48176.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6056.460561275324,\n          6081.0,\n          48176.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17376.42509154747,\n        \"min\": 1.0,\n        \"max\": 49156.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          49156.0,\n          8.396777605989096,\n          14.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_name_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17403.716163099027,\n        \"min\": 0.0,\n        \"max\": 49226.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          49226.0,\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17402.838957037755,\n        \"min\": 1.0,\n        \"max\": 49226.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.6195506439686342,\n          5.0,\n          49226.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numerator\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 74117.43421695498,\n        \"min\": 1.0,\n        \"max\": 212831.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          618.1561329080606,\n          131.0,\n          32293.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"denominator\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13436551.876435457,\n        \"min\": 90.0,\n        \"max\": 38290355.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          261714.47438662712,\n          86187.0,\n          37090.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2561.690853115962,\n        \"min\": 0.0247386975075762,\n        \"max\": 7323.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.441245184641635,\n          5.412931714541765,\n          7323.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ll_95ci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2565.29225192887,\n        \"min\": 0.0,\n        \"max\": 7323.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.300734898760326,\n          4.632966780536445,\n          7323.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ul_95ci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2559.6632091888546,\n        \"min\": 0.0590247830076228,\n        \"max\": 7323.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.595281366128389,\n          6.27614001212474,\n          7323.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"se\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2584.3506792435833,\n        \"min\": 0.010168342848445,\n        \"max\": 7323.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.5887939701463041,\n          0.479669227458115,\n          7323.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rse\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2581.186079945196,\n        \"min\": 0.216761704392,\n        \"max\": 7323.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.862677635056343,\n          16.2221421130763,\n          7323.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca_decile\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2225.904851326906,\n        \"min\": 1.0,\n        \"max\": 6301.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.501348992223456,\n          8.0,\n          6301.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca_rr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2582.5439567902627,\n        \"min\": 0.00428838025858251,\n        \"max\": 7323.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.0643894099067455,\n          1.065013575833245,\n          7323.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dof_population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13404641.037054067,\n        \"min\": 0.0,\n        \"max\": 38193865.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          251459.89032591827,\n          83832.0,\n          38660.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"version\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000049226\",\n        \"max\": \"2015-10-21 11:57:42\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"49226\",\n          \"2015-10-21 11:57:29.355421952\",\n          \"2015-10-21 11:57:36\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Cleaning Data"
      ],
      "metadata": {
        "id": "Rf8-gme_9xLu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# view unique values in ind_id column\n",
        "df['ind_id'].unique()"
      ],
      "metadata": {
        "id": "kTfMWoxp53Ft",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d0b6502c-8c63-485d-d4dd-b63eada1eba2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([752, 'END OF TABLE'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[df['ind_id'] == 'END OF TABLE']\n"
      ],
      "metadata": {
        "id": "CJmOJ7Tf5_j6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "outputId": "e4516032-d417-4c8a-f90d-b5ca809f7f64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             ind_id ind_definition  reportyear  race_eth_code race_eth_name  \\\n",
              "49226  END OF TABLE            NaN         NaN            NaN           NaN   \n",
              "\n",
              "      geotype  geotypevalue geoname  county_fips county_name  region_code  \\\n",
              "49226     NaN           NaN     NaN          NaN         NaN          NaN   \n",
              "\n",
              "      region_name  strata_name_code strata_name  strata_level_name_code  \\\n",
              "49226         NaN               NaN         NaN                     NaN   \n",
              "\n",
              "      strata_level_name  numerator  denominator  rate  ll_95ci  ul_95ci  se  \\\n",
              "49226               NaN        NaN          NaN   NaN      NaN      NaN NaN   \n",
              "\n",
              "       rse  ca_decile  ca_rr  dof_population version  \n",
              "49226  NaN        NaN    NaN             NaN     NaT  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-08009184-21ec-4b40-9221-05776c432067\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ind_id</th>\n",
              "      <th>ind_definition</th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "      <th>version</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>49226</th>\n",
              "      <td>END OF TABLE</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08009184-21ec-4b40-9221-05776c432067')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-08009184-21ec-4b40-9221-05776c432067 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-08009184-21ec-4b40-9221-05776c432067');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is the last row of the dataset and has no values in any column. Drop the above row, it is not needed."
      ],
      "metadata": {
        "id": "K_ZFP4eP6WTC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "drop_index = df.index[df['ind_id']=='END OF TABLE'].to_list()"
      ],
      "metadata": {
        "id": "NCzCOxi4Iyza"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# shows the index of the row that we want to drop\n",
        "print(drop_index)"
      ],
      "metadata": {
        "id": "f7-eJvNjKglO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0b8b01f-74ee-45ea-b8fe-30aa96d6c764"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[49226]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#drops the row based on the index\n",
        "df.drop(index=drop_index, inplace = True)"
      ],
      "metadata": {
        "id": "W0i9CL5iK2rA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#check that last row does not show end of table\n",
        "df[-1:]"
      ],
      "metadata": {
        "id": "ACbHzmo4LDVe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "outputId": "6e76627a-45c0-4bfb-e833-8ffd7d391911"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      ind_id                                 ind_definition  reportyear  \\\n",
              "49225    752  Number of Violent Crimes per 1,000 Population      2013.0   \n",
              "\n",
              "       race_eth_code race_eth_name geotype  geotypevalue              geoname  \\\n",
              "49225            9.0         Total      RE          14.0  Southern California   \n",
              "\n",
              "       county_fips county_name  region_code          region_name  \\\n",
              "49225          NaN         NaN         14.0  Southern California   \n",
              "\n",
              "       strata_name_code            strata_name  strata_level_name_code  \\\n",
              "49225               1.0  Type of violent crime                     5.0   \n",
              "\n",
              "         strata_level_name  numerator  denominator     rate   ll_95ci  \\\n",
              "49225  Violent crime total    63209.0   18543759.0  3.40864  3.382067   \n",
              "\n",
              "        ul_95ci        se      rse  ca_decile     ca_rr  dof_population  \\\n",
              "49225  3.435214  0.013558  0.39775        NaN  0.860977      18482091.0   \n",
              "\n",
              "                  version  \n",
              "49225 2015-10-21 11:57:42  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-40647dce-27b5-4cbe-96c5-a49b377b2588\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ind_id</th>\n",
              "      <th>ind_definition</th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "      <th>version</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>49225</th>\n",
              "      <td>752</td>\n",
              "      <td>Number of Violent Crimes per 1,000 Population</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>RE</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>63209.0</td>\n",
              "      <td>18543759.0</td>\n",
              "      <td>3.40864</td>\n",
              "      <td>3.382067</td>\n",
              "      <td>3.435214</td>\n",
              "      <td>0.013558</td>\n",
              "      <td>0.39775</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.860977</td>\n",
              "      <td>18482091.0</td>\n",
              "      <td>2015-10-21 11:57:42</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40647dce-27b5-4cbe-96c5-a49b377b2588')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-40647dce-27b5-4cbe-96c5-a49b377b2588 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-40647dce-27b5-4cbe-96c5-a49b377b2588');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#see if there is a reason to keep column ind_definition and ind_ind\n",
        "x = df['ind_definition'].unique()\n",
        "y = df['ind_id'].unique()\n",
        "print(x,y)"
      ],
      "metadata": {
        "id": "U-o_UAyQ6a8Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ec2cf831-f2f3-440b-f731-28ee930ae9ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Number of Violent Crimes per 1,000 Population'] [752]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Drop above columns, we know this is a data set that shows Number of Violent Crimes per 1,000 Population. ind_id is not any sort of index and does not have a purpose for exploring this dataset."
      ],
      "metadata": {
        "id": "05hmym5h6lOP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#including version number in this as well since it is in the df_original if we ever need to refernece.\n",
        "df.drop(columns=['ind_definition', 'ind_id', 'version'], inplace = True)\n",
        "df.head()"
      ],
      "metadata": {
        "id": "OMhnJYGS6uJj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "outputId": "5da6fbd5-fbfe-4f87-d947-edb71d9bd15b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   reportyear  race_eth_code race_eth_name geotype  geotypevalue     geoname  \\\n",
              "0      2000.0            9.0         Total      CA           6.0  California   \n",
              "1      2000.0            9.0         Total      CA           6.0  California   \n",
              "2      2000.0            9.0         Total      CA           6.0  California   \n",
              "3      2000.0            9.0         Total      CA           6.0  California   \n",
              "4      2000.0            9.0         Total      CA           6.0  California   \n",
              "\n",
              "   county_fips county_name  region_code region_name  strata_name_code  \\\n",
              "0          NaN         NaN          NaN         NaN               1.0   \n",
              "1          NaN         NaN          NaN         NaN               1.0   \n",
              "2          NaN         NaN          NaN         NaN               1.0   \n",
              "3          NaN         NaN          NaN         NaN               1.0   \n",
              "4          NaN         NaN          NaN         NaN               1.0   \n",
              "\n",
              "             strata_name  strata_level_name_code  \\\n",
              "0  Type of violent crime                     1.0   \n",
              "1  Type of violent crime                     2.0   \n",
              "2  Type of violent crime                     3.0   \n",
              "3  Type of violent crime                     4.0   \n",
              "4  Type of violent crime                     5.0   \n",
              "\n",
              "                       strata_level_name  numerator  denominator      rate  \\\n",
              "0                     Aggravated assault   138325.0   33847694.0       NaN   \n",
              "1                          Forcible rape     9784.0   33847694.0       NaN   \n",
              "2  Murder and non-negligent manslaughter     2079.0   33847694.0       NaN   \n",
              "3                                Robbery    60237.0   33847694.0       NaN   \n",
              "4                    Violent crime total   210448.0   33847694.0  6.217499   \n",
              "\n",
              "    ll_95ci   ul_95ci        se       rse  ca_decile  ca_rr  dof_population  \n",
              "0       NaN       NaN       NaN       NaN        NaN    NaN      33873086.0  \n",
              "1       NaN       NaN       NaN       NaN        NaN    NaN      33873086.0  \n",
              "2       NaN       NaN       NaN       NaN        NaN    NaN      33873086.0  \n",
              "3       NaN       NaN       NaN       NaN        NaN    NaN      33873086.0  \n",
              "4  6.190935  6.244063  0.013553  0.217985        NaN    1.0      33873086.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-828d3056-de88-4041-86cf-d90a08a90675\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>138325.0</td>\n",
              "      <td>33847694.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Forcible rape</td>\n",
              "      <td>9784.0</td>\n",
              "      <td>33847694.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>2079.0</td>\n",
              "      <td>33847694.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>60237.0</td>\n",
              "      <td>33847694.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>210448.0</td>\n",
              "      <td>33847694.0</td>\n",
              "      <td>6.217499</td>\n",
              "      <td>6.190935</td>\n",
              "      <td>6.244063</td>\n",
              "      <td>0.013553</td>\n",
              "      <td>0.217985</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-828d3056-de88-4041-86cf-d90a08a90675')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-828d3056-de88-4041-86cf-d90a08a90675 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-828d3056-de88-4041-86cf-d90a08a90675');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f9c4434f-ae1c-46c1-ad80-95d852681671\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f9c4434f-ae1c-46c1-ad80-95d852681671')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f9c4434f-ae1c-46c1-ad80-95d852681671 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explore why we have missing values in county and region columns"
      ],
      "metadata": {
        "id": "IzXaSo3PXgnG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# isolate the location columns\n",
        "location_df = df.iloc[:,3:15]\n",
        "location_df.head()"
      ],
      "metadata": {
        "id": "b-_2Ft9YXedX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "outputId": "e487a3df-883e-4456-94dc-3000cf46dd1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  geotype  geotypevalue     geoname  county_fips county_name  region_code  \\\n",
              "0      CA           6.0  California          NaN         NaN          NaN   \n",
              "1      CA           6.0  California          NaN         NaN          NaN   \n",
              "2      CA           6.0  California          NaN         NaN          NaN   \n",
              "3      CA           6.0  California          NaN         NaN          NaN   \n",
              "4      CA           6.0  California          NaN         NaN          NaN   \n",
              "\n",
              "  region_name  strata_name_code            strata_name  \\\n",
              "0         NaN               1.0  Type of violent crime   \n",
              "1         NaN               1.0  Type of violent crime   \n",
              "2         NaN               1.0  Type of violent crime   \n",
              "3         NaN               1.0  Type of violent crime   \n",
              "4         NaN               1.0  Type of violent crime   \n",
              "\n",
              "   strata_level_name_code                      strata_level_name  numerator  \n",
              "0                     1.0                     Aggravated assault   138325.0  \n",
              "1                     2.0                          Forcible rape     9784.0  \n",
              "2                     3.0  Murder and non-negligent manslaughter     2079.0  \n",
              "3                     4.0                                Robbery    60237.0  \n",
              "4                     5.0                    Violent crime total   210448.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c668b7f-9efa-4415-ae08-1ae68d12a380\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>138325.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Forcible rape</td>\n",
              "      <td>9784.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>2079.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>60237.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>210448.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c668b7f-9efa-4415-ae08-1ae68d12a380')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6c668b7f-9efa-4415-ae08-1ae68d12a380 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6c668b7f-9efa-4415-ae08-1ae68d12a380');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-667db2fd-2918-4c82-a418-c6fe5a644138\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-667db2fd-2918-4c82-a418-c6fe5a644138')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-667db2fd-2918-4c82-a418-c6fe5a644138 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "location_df",
              "summary": "{\n  \"name\": \"location_df\",\n  \"rows\": 49226,\n  \"fields\": [\n    {\n      \"column\": \"geotype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"CO\",\n          \"RE\",\n          \"CA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotypevalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26562.720266579,\n        \"min\": 1.0,\n        \"max\": 87090.0,\n        \"num_unique_values\": 1639,\n        \"samples\": [\n          48298.0,\n          78949.0,\n          73794.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geoname\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1616,\n        \"samples\": [\n          \"Big Bear City CDP\",\n          \"Mountain Gate CDP\",\n          \"Raisin City CDP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_fips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.845060913878473,\n        \"min\": 6001.0,\n        \"max\": 6115.0,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          6001.0,\n          6011.0,\n          6069.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 58,\n        \"samples\": [\n          \"Alameda\",\n          \"Colusa\",\n          \"San Benito\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.9510455656885854,\n        \"min\": 1.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          4.0,\n          11.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Monterey Bay\",\n          \"San Luis Obispo\",\n          \"Bay Area\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_name_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Type of violent crime\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7498106664480535,\n        \"min\": 1.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Aggravated assault\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numerator\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5805.419985779282,\n        \"min\": 1.0,\n        \"max\": 212831.0,\n        \"num_unique_values\": 2441,\n        \"samples\": [\n          727.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# view where fips, county name, region code, and region name are null.\n",
        "\n",
        "location_df[(location_df['county_fips'].isnull()) & (location_df['county_name'].isnull()) & (location_df['region_code'].isnull()) & (location_df['region_name'].isnull())]"
      ],
      "metadata": {
        "id": "EuBlIoE3ZrVg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "outputId": "1855cd8e-b21f-46c0-929e-667e9aa70074"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      geotype  geotypevalue     geoname  county_fips county_name  region_code  \\\n",
              "0          CA           6.0  California          NaN         NaN          NaN   \n",
              "1          CA           6.0  California          NaN         NaN          NaN   \n",
              "2          CA           6.0  California          NaN         NaN          NaN   \n",
              "3          CA           6.0  California          NaN         NaN          NaN   \n",
              "4          CA           6.0  California          NaN         NaN          NaN   \n",
              "...       ...           ...         ...          ...         ...          ...   \n",
              "45400      CA           6.0  California          NaN         NaN          NaN   \n",
              "45401      CA           6.0  California          NaN         NaN          NaN   \n",
              "45402      CA           6.0  California          NaN         NaN          NaN   \n",
              "45403      CA           6.0  California          NaN         NaN          NaN   \n",
              "45404      CA           6.0  California          NaN         NaN          NaN   \n",
              "\n",
              "      region_name  strata_name_code            strata_name  \\\n",
              "0             NaN               1.0  Type of violent crime   \n",
              "1             NaN               1.0  Type of violent crime   \n",
              "2             NaN               1.0  Type of violent crime   \n",
              "3             NaN               1.0  Type of violent crime   \n",
              "4             NaN               1.0  Type of violent crime   \n",
              "...           ...               ...                    ...   \n",
              "45400         NaN               1.0  Type of violent crime   \n",
              "45401         NaN               1.0  Type of violent crime   \n",
              "45402         NaN               1.0  Type of violent crime   \n",
              "45403         NaN               1.0  Type of violent crime   \n",
              "45404         NaN               1.0  Type of violent crime   \n",
              "\n",
              "       strata_level_name_code                      strata_level_name  \\\n",
              "0                         1.0                     Aggravated assault   \n",
              "1                         2.0                          Forcible rape   \n",
              "2                         3.0  Murder and non-negligent manslaughter   \n",
              "3                         4.0                                Robbery   \n",
              "4                         5.0                    Violent crime total   \n",
              "...                       ...                                    ...   \n",
              "45400                     1.0                     Aggravated assault   \n",
              "45401                     2.0                          Forcible rape   \n",
              "45402                     3.0  Murder and non-negligent manslaughter   \n",
              "45403                     4.0                                Robbery   \n",
              "45404                     5.0                    Violent crime total   \n",
              "\n",
              "       numerator  \n",
              "0       138325.0  \n",
              "1         9784.0  \n",
              "2         2079.0  \n",
              "3        60237.0  \n",
              "4       210448.0  \n",
              "...          ...  \n",
              "45400    88785.0  \n",
              "45401     7454.0  \n",
              "45402     1745.0  \n",
              "45403    53609.0  \n",
              "45404   151593.0  \n",
              "\n",
              "[70 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91cedbfa-5605-4732-8e9b-d3e23af4fc9d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>138325.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Forcible rape</td>\n",
              "      <td>9784.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>2079.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>60237.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>210448.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45400</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>88785.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45401</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Forcible rape</td>\n",
              "      <td>7454.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45402</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>1745.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45403</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>53609.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45404</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>151593.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>70 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91cedbfa-5605-4732-8e9b-d3e23af4fc9d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-91cedbfa-5605-4732-8e9b-d3e23af4fc9d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-91cedbfa-5605-4732-8e9b-d3e23af4fc9d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-37914c14-fdc8-43e3-bb9c-85d07ba81a39\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-37914c14-fdc8-43e3-bb9c-85d07ba81a39')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-37914c14-fdc8-43e3-bb9c-85d07ba81a39 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Above we can see that the only time there is no location data in the columns county_fips, county name, region code, and region name is when the geoname is California. This is showing that there is state level aggregations of each crime per year. This also explaiins why there are 70 null values in region_name. I will look to see if there are aggregations at the lower level like regional aggregations."
      ],
      "metadata": {
        "id": "DtnxLkwmbqQj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# see if any data is returned when county fips is NOT null, while county_name, region_code and region_name ARE null\n",
        "location_df[(location_df['county_fips'].notnull()) & (location_df['county_name'].isnull()) & (location_df['region_code'].isnull()) & (location_df['region_name'].isnull())]"
      ],
      "metadata": {
        "id": "0-gyfoaNDoTW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "outputId": "774459cf-dc24-44af-817b-20596d13eecc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [geotype, geotypevalue, geoname, county_fips, county_name, region_code, region_name, strata_name_code, strata_name, strata_level_name_code, strata_level_name, numerator]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6872eebc-226b-471e-b303-2ff14e729325\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6872eebc-226b-471e-b303-2ff14e729325')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6872eebc-226b-471e-b303-2ff14e729325 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6872eebc-226b-471e-b303-2ff14e729325');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "When county_fips is not null and the remainder of columns are null, we yield no results meaning when county_fips has values we will see values in count_name, region_code, and region_name. Lets test this below. We will adjust one column at a time to include notnull() until all columns have notnull()"
      ],
      "metadata": {
        "id": "DGAd0vfVD87i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# when we try to see the location df where county_fips and county_name don't have null values but region_code and region_name have null values, we get no output.\n",
        "\n",
        "location_df[(location_df['county_fips'].notnull()) & (location_df['county_name'].notnull()) & (location_df['region_code'].isnull()) & (location_df['region_name'].isnull())]"
      ],
      "metadata": {
        "id": "BqXVdvtPEXjV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "outputId": "16c6a2b2-1718-43f3-ee44-1c1bff83bf5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [geotype, geotypevalue, geoname, county_fips, county_name, region_code, region_name, strata_name_code, strata_name, strata_level_name_code, strata_level_name, numerator]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e9ea3326-ed29-4d6f-9fe6-ee5e04ee9dcd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9ea3326-ed29-4d6f-9fe6-ee5e04ee9dcd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e9ea3326-ed29-4d6f-9fe6-ee5e04ee9dcd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e9ea3326-ed29-4d6f-9fe6-ee5e04ee9dcd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# when we try to see the location df where county_fips, county_name, and region_code don't have null values but region_name has null values, we get no output.\n",
        "\n",
        "location_df[(location_df['county_fips'].notnull()) & (location_df['county_name'].notnull()) & (location_df['region_code'].notnull()) & (location_df['region_name'].isnull())]"
      ],
      "metadata": {
        "id": "BV5C0RH0EXgZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "outputId": "63ff5cbc-c01c-4d5c-bce5-3c9f40c4c2c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [geotype, geotypevalue, geoname, county_fips, county_name, region_code, region_name, strata_name_code, strata_name, strata_level_name_code, strata_level_name, numerator]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-334fe891-7a2b-426d-a37b-9f05e6abc60d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-334fe891-7a2b-426d-a37b-9f05e6abc60d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-334fe891-7a2b-426d-a37b-9f05e6abc60d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-334fe891-7a2b-426d-a37b-9f05e6abc60d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# When we look at a the location df where all columns don't have null values, we do get a df output.\n",
        "\n",
        "location_df[(location_df['county_fips'].notnull()) & (location_df['county_name'].notnull()) & (location_df['region_code'].notnull()) & (location_df['region_name'].notnull())]"
      ],
      "metadata": {
        "id": "tekS1cKaEXdb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 704
        },
        "outputId": "6e8d85da-2ee1-430c-b63f-93d6ff4d9fcc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      geotype  geotypevalue            geoname  county_fips     county_name  \\\n",
              "5          CO        6001.0            Alameda       6001.0         Alameda   \n",
              "6          CO        6001.0            Alameda       6001.0         Alameda   \n",
              "7          CO        6001.0            Alameda       6001.0         Alameda   \n",
              "8          CO        6001.0            Alameda       6001.0         Alameda   \n",
              "9          CO        6001.0            Alameda       6001.0         Alameda   \n",
              "...       ...           ...                ...          ...             ...   \n",
              "49151      PL       87056.0  Yucca Valley town       6071.0  San Bernardino   \n",
              "49152      PL       87056.0  Yucca Valley town       6071.0  San Bernardino   \n",
              "49153      PL       87056.0  Yucca Valley town       6071.0  San Bernardino   \n",
              "49154      PL       87056.0  Yucca Valley town       6071.0  San Bernardino   \n",
              "49155      PL       87090.0        Zayante CDP       6087.0      Santa Cruz   \n",
              "\n",
              "       region_code          region_name  strata_name_code  \\\n",
              "5              1.0             Bay Area               1.0   \n",
              "6              1.0             Bay Area               1.0   \n",
              "7              1.0             Bay Area               1.0   \n",
              "8              1.0             Bay Area               1.0   \n",
              "9              1.0             Bay Area               1.0   \n",
              "...            ...                  ...               ...   \n",
              "49151         14.0  Southern California               1.0   \n",
              "49152         14.0  Southern California               1.0   \n",
              "49153         14.0  Southern California               1.0   \n",
              "49154         14.0  Southern California               1.0   \n",
              "49155          4.0         Monterey Bay               1.0   \n",
              "\n",
              "                 strata_name  strata_level_name_code  \\\n",
              "5      Type of violent crime                     1.0   \n",
              "6      Type of violent crime                     2.0   \n",
              "7      Type of violent crime                     3.0   \n",
              "8      Type of violent crime                     4.0   \n",
              "9      Type of violent crime                     5.0   \n",
              "...                      ...                     ...   \n",
              "49151  Type of violent crime                     2.0   \n",
              "49152  Type of violent crime                     3.0   \n",
              "49153  Type of violent crime                     4.0   \n",
              "49154  Type of violent crime                     5.0   \n",
              "49155  Type of violent crime                     6.0   \n",
              "\n",
              "                           strata_level_name  numerator  \n",
              "5                         Aggravated assault     5457.0  \n",
              "6                              Forcible rape      568.0  \n",
              "7      Murder and non-negligent manslaughter      110.0  \n",
              "8                                    Robbery     3368.0  \n",
              "9                        Violent crime total     9503.0  \n",
              "...                                      ...        ...  \n",
              "49151                          Forcible rape        7.0  \n",
              "49152  Murder and non-negligent manslaughter        3.0  \n",
              "49153                                Robbery       15.0  \n",
              "49154                    Violent crime total       86.0  \n",
              "49155           Jurisdiction does not report        NaN  \n",
              "\n",
              "[48176 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1cf25aa7-7af6-4ea1-b730-f017580fb670\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>5457.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Forcible rape</td>\n",
              "      <td>568.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>110.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>3368.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>9503.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49151</th>\n",
              "      <td>PL</td>\n",
              "      <td>87056.0</td>\n",
              "      <td>Yucca Valley town</td>\n",
              "      <td>6071.0</td>\n",
              "      <td>San Bernardino</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Forcible rape</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49152</th>\n",
              "      <td>PL</td>\n",
              "      <td>87056.0</td>\n",
              "      <td>Yucca Valley town</td>\n",
              "      <td>6071.0</td>\n",
              "      <td>San Bernardino</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49153</th>\n",
              "      <td>PL</td>\n",
              "      <td>87056.0</td>\n",
              "      <td>Yucca Valley town</td>\n",
              "      <td>6071.0</td>\n",
              "      <td>San Bernardino</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49154</th>\n",
              "      <td>PL</td>\n",
              "      <td>87056.0</td>\n",
              "      <td>Yucca Valley town</td>\n",
              "      <td>6071.0</td>\n",
              "      <td>San Bernardino</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>86.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49155</th>\n",
              "      <td>PL</td>\n",
              "      <td>87090.0</td>\n",
              "      <td>Zayante CDP</td>\n",
              "      <td>6087.0</td>\n",
              "      <td>Santa Cruz</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Monterey Bay</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Jurisdiction does not report</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>48176 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1cf25aa7-7af6-4ea1-b730-f017580fb670')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1cf25aa7-7af6-4ea1-b730-f017580fb670 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1cf25aa7-7af6-4ea1-b730-f017580fb670');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9f485d5f-66e4-47c5-9ff7-26b0e191f750\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9f485d5f-66e4-47c5-9ff7-26b0e191f750')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9f485d5f-66e4-47c5-9ff7-26b0e191f750 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"location_df[(location_df['county_fips']\",\n  \"rows\": 48176,\n  \"fields\": [\n    {\n      \"column\": \"geotype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"PL\",\n          \"CO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotypevalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26210.713484170785,\n        \"min\": 135.0,\n        \"max\": 87090.0,\n        \"num_unique_values\": 1625,\n        \"samples\": [\n          6434.0,\n          34928.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geoname\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1606,\n        \"samples\": [\n          \"La Crescenta-Montrose CDP\",\n          \"Adin CDP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_fips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.845060913878473,\n        \"min\": 6001.0,\n        \"max\": 6115.0,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          6001.0,\n          6011.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 58,\n        \"samples\": [\n          \"Alameda\",\n          \"Colusa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.966311190545437,\n        \"min\": 1.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          4.0,\n          11.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Monterey Bay\",\n          \"San Luis Obispo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_name_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Type of violent crime\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7539761345973262,\n        \"min\": 1.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Aggravated assault\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numerator\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2123.737090202212,\n        \"min\": 1.0,\n        \"max\": 89986.0,\n        \"num_unique_values\": 2133,\n        \"samples\": [\n          114.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "When our county_fips column contains no null values, no  California aggregate numbers are present and we have complete data in the county_name, region_code, and region_name columns."
      ],
      "metadata": {
        "id": "1HksltI0KQdf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Why are there nulls in the fips and county name? Let us explore"
      ],
      "metadata": {
        "id": "uFr-y2k1FGq5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# view df where county_fips and county_name contain null values\n",
        "\n",
        "location_df[(location_df['county_fips']).isnull() & (location_df['county_name'].isnull())]"
      ],
      "metadata": {
        "id": "8AqpWHJ1EXad",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "outputId": "11d6dc6f-5060-4e83-9677-f9cb6169c68b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      geotype  geotypevalue              geoname  county_fips county_name  \\\n",
              "0          CA           6.0           California          NaN         NaN   \n",
              "1          CA           6.0           California          NaN         NaN   \n",
              "2          CA           6.0           California          NaN         NaN   \n",
              "3          CA           6.0           California          NaN         NaN   \n",
              "4          CA           6.0           California          NaN         NaN   \n",
              "...       ...           ...                  ...          ...         ...   \n",
              "49221      RE          14.0  Southern California          NaN         NaN   \n",
              "49222      RE          14.0  Southern California          NaN         NaN   \n",
              "49223      RE          14.0  Southern California          NaN         NaN   \n",
              "49224      RE          14.0  Southern California          NaN         NaN   \n",
              "49225      RE          14.0  Southern California          NaN         NaN   \n",
              "\n",
              "       region_code          region_name  strata_name_code  \\\n",
              "0              NaN                  NaN               1.0   \n",
              "1              NaN                  NaN               1.0   \n",
              "2              NaN                  NaN               1.0   \n",
              "3              NaN                  NaN               1.0   \n",
              "4              NaN                  NaN               1.0   \n",
              "...            ...                  ...               ...   \n",
              "49221         14.0  Southern California               1.0   \n",
              "49222         14.0  Southern California               1.0   \n",
              "49223         14.0  Southern California               1.0   \n",
              "49224         14.0  Southern California               1.0   \n",
              "49225         14.0  Southern California               1.0   \n",
              "\n",
              "                 strata_name  strata_level_name_code  \\\n",
              "0      Type of violent crime                     1.0   \n",
              "1      Type of violent crime                     2.0   \n",
              "2      Type of violent crime                     3.0   \n",
              "3      Type of violent crime                     4.0   \n",
              "4      Type of violent crime                     5.0   \n",
              "...                      ...                     ...   \n",
              "49221  Type of violent crime                     1.0   \n",
              "49222  Type of violent crime                     2.0   \n",
              "49223  Type of violent crime                     3.0   \n",
              "49224  Type of violent crime                     4.0   \n",
              "49225  Type of violent crime                     5.0   \n",
              "\n",
              "                           strata_level_name  numerator  \n",
              "0                         Aggravated assault   138325.0  \n",
              "1                              Forcible rape     9784.0  \n",
              "2      Murder and non-negligent manslaughter     2079.0  \n",
              "3                                    Robbery    60237.0  \n",
              "4                        Violent crime total   210448.0  \n",
              "...                                      ...        ...  \n",
              "49221                     Aggravated assault    35091.0  \n",
              "49222                          Forcible rape     3048.0  \n",
              "49223  Murder and non-negligent manslaughter      849.0  \n",
              "49224                                Robbery    24221.0  \n",
              "49225                    Violent crime total    63209.0  \n",
              "\n",
              "[1050 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3259b799-662c-427f-ab9b-85248f9144ee\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>138325.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Forcible rape</td>\n",
              "      <td>9784.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>2079.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>60237.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>210448.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49221</th>\n",
              "      <td>RE</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>35091.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49222</th>\n",
              "      <td>RE</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Forcible rape</td>\n",
              "      <td>3048.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49223</th>\n",
              "      <td>RE</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>849.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49224</th>\n",
              "      <td>RE</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>24221.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49225</th>\n",
              "      <td>RE</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>63209.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1050 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3259b799-662c-427f-ab9b-85248f9144ee')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3259b799-662c-427f-ab9b-85248f9144ee button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3259b799-662c-427f-ab9b-85248f9144ee');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9f6c90a4-26b0-4fa5-b1f5-77469d744efc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9f6c90a4-26b0-4fa5-b1f5-77469d744efc')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9f6c90a4-26b0-4fa5-b1f5-77469d744efc button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# figure out which geoname and regions are present when county fips data is missing\n",
        "\n",
        "x = location_df['geoname'][(location_df['county_fips']).isnull() & (location_df['county_name'].isnull())].unique()\n",
        "\n",
        "\n",
        "y = location_df['region_name'][(location_df['county_fips']).isnull() & (location_df['county_name'].isnull())].unique()\n",
        "\n",
        "print(f'{x}\\n{y}')"
      ],
      "metadata": {
        "id": "lqwybajxEXXH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c7bb0ae0-9467-4a25-9842-d0bb37f736f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['California' 'Bay Area' 'Butte' 'Central/Southeast Sierra' 'Monterey Bay'\n",
            " 'North Coast' 'Northeast Sierra' 'Northern Sacramento Valley'\n",
            " 'Sacramento Area' 'San Diego' 'San Joaquin Valley' 'San Luis Obispo'\n",
            " 'Santa Barbara' 'Shasta' 'Southern California']\n",
            "[nan 'Bay Area' 'Butte' 'Central/Southeast Sierra' 'Monterey Bay'\n",
            " 'North Coast' 'Northeast Sierra' 'Northern Sacramento Valley'\n",
            " 'Sacramento Area' 'San Diego' 'San Joaquin Valley' 'San Luis Obispo'\n",
            " 'Santa Barbara' 'Shasta' 'Southern California']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# view an example of a region where county data is missing but region data is present.\n",
        "\n",
        "location_df[(df['county_fips']).isnull() & (location_df['county_name'].isnull()) & (location_df['geoname'] == 'Butte')]"
      ],
      "metadata": {
        "id": "ExI89jZEIKzh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "outputId": "66b460be-6577-4400-a94e-d8e3594fa49a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      geotype  geotypevalue geoname  county_fips county_name  region_code  \\\n",
              "3326       RE           2.0   Butte          NaN         NaN          2.0   \n",
              "3327       RE           2.0   Butte          NaN         NaN          2.0   \n",
              "3328       RE           2.0   Butte          NaN         NaN          2.0   \n",
              "3329       RE           2.0   Butte          NaN         NaN          2.0   \n",
              "3330       RE           2.0   Butte          NaN         NaN          2.0   \n",
              "...       ...           ...     ...          ...         ...          ...   \n",
              "49161      RE           2.0   Butte          NaN         NaN          2.0   \n",
              "49162      RE           2.0   Butte          NaN         NaN          2.0   \n",
              "49163      RE           2.0   Butte          NaN         NaN          2.0   \n",
              "49164      RE           2.0   Butte          NaN         NaN          2.0   \n",
              "49165      RE           2.0   Butte          NaN         NaN          2.0   \n",
              "\n",
              "      region_name  strata_name_code            strata_name  \\\n",
              "3326        Butte               1.0  Type of violent crime   \n",
              "3327        Butte               1.0  Type of violent crime   \n",
              "3328        Butte               1.0  Type of violent crime   \n",
              "3329        Butte               1.0  Type of violent crime   \n",
              "3330        Butte               1.0  Type of violent crime   \n",
              "...           ...               ...                    ...   \n",
              "49161       Butte               1.0  Type of violent crime   \n",
              "49162       Butte               1.0  Type of violent crime   \n",
              "49163       Butte               1.0  Type of violent crime   \n",
              "49164       Butte               1.0  Type of violent crime   \n",
              "49165       Butte               1.0  Type of violent crime   \n",
              "\n",
              "       strata_level_name_code                      strata_level_name  \\\n",
              "3326                      1.0                     Aggravated assault   \n",
              "3327                      2.0                          Forcible rape   \n",
              "3328                      3.0  Murder and non-negligent manslaughter   \n",
              "3329                      4.0                                Robbery   \n",
              "3330                      5.0                    Violent crime total   \n",
              "...                       ...                                    ...   \n",
              "49161                     1.0                     Aggravated assault   \n",
              "49162                     2.0                          Forcible rape   \n",
              "49163                     3.0  Murder and non-negligent manslaughter   \n",
              "49164                     4.0                                Robbery   \n",
              "49165                     5.0                    Violent crime total   \n",
              "\n",
              "       numerator  \n",
              "3326       475.0  \n",
              "3327        77.0  \n",
              "3328         8.0  \n",
              "3329       139.0  \n",
              "3330       699.0  \n",
              "...          ...  \n",
              "49161      394.0  \n",
              "49162       79.0  \n",
              "49163       13.0  \n",
              "49164      148.0  \n",
              "49165      634.0  \n",
              "\n",
              "[70 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-945b98d6-5715-4bbd-97b5-c4c8407f5c55\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3326</th>\n",
              "      <td>RE</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>475.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3327</th>\n",
              "      <td>RE</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Forcible rape</td>\n",
              "      <td>77.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3328</th>\n",
              "      <td>RE</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3329</th>\n",
              "      <td>RE</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>139.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3330</th>\n",
              "      <td>RE</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>699.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49161</th>\n",
              "      <td>RE</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>394.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49162</th>\n",
              "      <td>RE</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Forcible rape</td>\n",
              "      <td>79.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49163</th>\n",
              "      <td>RE</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>13.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49164</th>\n",
              "      <td>RE</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>148.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49165</th>\n",
              "      <td>RE</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>634.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>70 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-945b98d6-5715-4bbd-97b5-c4c8407f5c55')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-945b98d6-5715-4bbd-97b5-c4c8407f5c55 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-945b98d6-5715-4bbd-97b5-c4c8407f5c55');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e16f3921-dc91-4250-b0d8-d3b0c07840d7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e16f3921-dc91-4250-b0d8-d3b0c07840d7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e16f3921-dc91-4250-b0d8-d3b0c07840d7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# pull suspected aggregate data at regional level from the above table\n",
        "df.loc[3326]"
      ],
      "metadata": {
        "id": "ERCFYCsNJOCQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 837
        },
        "outputId": "178422b6-66e6-4b57-e0d5-0f13c9a7153c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "reportyear                               2000.0\n",
              "race_eth_code                               9.0\n",
              "race_eth_name                             Total\n",
              "geotype                                      RE\n",
              "geotypevalue                                2.0\n",
              "geoname                                   Butte\n",
              "county_fips                                 NaN\n",
              "county_name                                 NaN\n",
              "region_code                                 2.0\n",
              "region_name                               Butte\n",
              "strata_name_code                            1.0\n",
              "strata_name               Type of violent crime\n",
              "strata_level_name_code                      1.0\n",
              "strata_level_name            Aggravated assault\n",
              "numerator                                 475.0\n",
              "denominator                            203171.0\n",
              "rate                                        NaN\n",
              "ll_95ci                                     NaN\n",
              "ul_95ci                                     NaN\n",
              "se                                          NaN\n",
              "rse                                         NaN\n",
              "ca_decile                                   NaN\n",
              "ca_rr                                       NaN\n",
              "dof_population                         203171.0\n",
              "Name: 3326, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>3326</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>reportyear</th>\n",
              "      <td>2000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>race_eth_code</th>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>race_eth_name</th>\n",
              "      <td>Total</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geotype</th>\n",
              "      <td>RE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geotypevalue</th>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geoname</th>\n",
              "      <td>Butte</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>county_fips</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>county_name</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_code</th>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_name</th>\n",
              "      <td>Butte</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>strata_name_code</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>strata_name</th>\n",
              "      <td>Type of violent crime</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>strata_level_name</th>\n",
              "      <td>Aggravated assault</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>numerator</th>\n",
              "      <td>475.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>denominator</th>\n",
              "      <td>203171.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rate</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ll_95ci</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ul_95ci</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>se</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rse</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ca_decile</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ca_rr</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dof_population</th>\n",
              "      <td>203171.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# check that the above matches the the first column in the below where we pull data based on county fips number.\n",
        "\n",
        "df[(df['county_fips'] == 06007.0)].head(1)"
      ],
      "metadata": {
        "id": "Yl6Lt-DdJ7hh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "c9c8c2b7-b022-4fe1-dbcd-d2cdcc1009e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    reportyear  race_eth_code race_eth_name geotype  geotypevalue geoname  \\\n",
              "20      2000.0            9.0         Total      CO        6007.0   Butte   \n",
              "\n",
              "    county_fips county_name  region_code region_name  strata_name_code  \\\n",
              "20       6007.0       Butte          2.0       Butte               1.0   \n",
              "\n",
              "              strata_name  strata_level_name_code   strata_level_name  \\\n",
              "20  Type of violent crime                     1.0  Aggravated assault   \n",
              "\n",
              "    numerator  denominator  rate  ll_95ci  ul_95ci  se  rse  ca_decile  ca_rr  \\\n",
              "20      475.0     203171.0   NaN      NaN      NaN NaN  NaN        NaN    NaN   \n",
              "\n",
              "    dof_population  \n",
              "20        203171.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26f8a971-46db-4825-8dcf-c8e3529ee0c7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6007.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>6007.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Butte</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>475.0</td>\n",
              "      <td>203171.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>203171.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26f8a971-46db-4825-8dcf-c8e3529ee0c7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-26f8a971-46db-4825-8dcf-c8e3529ee0c7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-26f8a971-46db-4825-8dcf-c8e3529ee0c7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After the above steps we see that when the county_fips, county_name are null it is because we are looking at an aggregate view of crimes at the regional level, (geotype = 'RE'). Butte is one of the few regions in this table where the only county is Butte. At the regional level, Butte has a numerator of 475 for aggrevated assult in 2000 and when we call the county specific data, we can see that the numerator for aggrevated assult matches 475 in year 2000. Thus proving we have aggregations at state, regional, and county level. We can also reasonably assume that the nulls in the location specific columns are harmless and do not need to be removed."
      ],
      "metadata": {
        "id": "RvvFUlpwN0ZD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Rename one of the reported crimes into something less graphic for viewers"
      ],
      "metadata": {
        "id": "N_5pqvh0CwVD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# view the different violent crimes\n",
        "df['strata_level_name'].unique()"
      ],
      "metadata": {
        "id": "VpTPlQPWR9n2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "27672361-5b76-45af-cef4-1441acfb3c1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Aggravated assault', 'Forcible rape',\n",
              "       'Murder and non-negligent manslaughter', 'Robbery',\n",
              "       'Violent crime total', 'Jurisdiction does not report'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#view the data types for each column\n",
        "df.dtypes"
      ],
      "metadata": {
        "id": "Klw_LxIeVp4B",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 837
        },
        "outputId": "4f1a2a90-fca3-4064-e3da-2fa425f77696"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "reportyear                float64\n",
              "race_eth_code             float64\n",
              "race_eth_name              object\n",
              "geotype                    object\n",
              "geotypevalue              float64\n",
              "geoname                    object\n",
              "county_fips               float64\n",
              "county_name                object\n",
              "region_code               float64\n",
              "region_name                object\n",
              "strata_name_code          float64\n",
              "strata_name                object\n",
              "strata_level_name_code    float64\n",
              "strata_level_name          object\n",
              "numerator                 float64\n",
              "denominator               float64\n",
              "rate                      float64\n",
              "ll_95ci                   float64\n",
              "ul_95ci                   float64\n",
              "se                        float64\n",
              "rse                       float64\n",
              "ca_decile                 float64\n",
              "ca_rr                     float64\n",
              "dof_population            float64\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>reportyear</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>race_eth_code</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>race_eth_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geotype</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geotypevalue</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geoname</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>county_fips</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>county_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_code</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>strata_name_code</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>strata_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>strata_level_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>numerator</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>denominator</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rate</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ll_95ci</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ul_95ci</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>se</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rse</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ca_decile</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ca_rr</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dof_population</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#convert data dype to string and check data type.\n",
        "df['strata_level_name'] = df['strata_level_name'].convert_dtypes(convert_string = True)\n",
        "df['strata_level_name'].dtype"
      ],
      "metadata": {
        "id": "fMQbXiDySPa2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a615e3c-6549-4e25-a551-9b09569ca715"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "string[python]"
            ]
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# replace old crime name with new one\n",
        "df['strata_level_name'] = df['strata_level_name'].replace('Forcible rape', 'Sexual assult')"
      ],
      "metadata": {
        "id": "qKggpapaaFig"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# double check that the violent crime name changed.\n",
        "df.iloc[0:5,0:18]"
      ],
      "metadata": {
        "id": "I05J__E8TaP4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "outputId": "6abd1cc0-b209-4bc1-ccd8-38a99001e628"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   reportyear  race_eth_code race_eth_name geotype  geotypevalue     geoname  \\\n",
              "0      2000.0            9.0         Total      CA           6.0  California   \n",
              "1      2000.0            9.0         Total      CA           6.0  California   \n",
              "2      2000.0            9.0         Total      CA           6.0  California   \n",
              "3      2000.0            9.0         Total      CA           6.0  California   \n",
              "4      2000.0            9.0         Total      CA           6.0  California   \n",
              "\n",
              "   county_fips county_name  region_code region_name  strata_name_code  \\\n",
              "0          NaN         NaN          NaN         NaN               1.0   \n",
              "1          NaN         NaN          NaN         NaN               1.0   \n",
              "2          NaN         NaN          NaN         NaN               1.0   \n",
              "3          NaN         NaN          NaN         NaN               1.0   \n",
              "4          NaN         NaN          NaN         NaN               1.0   \n",
              "\n",
              "             strata_name  strata_level_name_code  \\\n",
              "0  Type of violent crime                     1.0   \n",
              "1  Type of violent crime                     2.0   \n",
              "2  Type of violent crime                     3.0   \n",
              "3  Type of violent crime                     4.0   \n",
              "4  Type of violent crime                     5.0   \n",
              "\n",
              "                       strata_level_name  numerator  denominator      rate  \\\n",
              "0                     Aggravated assault   138325.0   33847694.0       NaN   \n",
              "1                          Sexual assult     9784.0   33847694.0       NaN   \n",
              "2  Murder and non-negligent manslaughter     2079.0   33847694.0       NaN   \n",
              "3                                Robbery    60237.0   33847694.0       NaN   \n",
              "4                    Violent crime total   210448.0   33847694.0  6.217499   \n",
              "\n",
              "    ll_95ci  \n",
              "0       NaN  \n",
              "1       NaN  \n",
              "2       NaN  \n",
              "3       NaN  \n",
              "4  6.190935  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2fae83d1-f98c-4637-8ac2-2b75ff7061a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>138325.0</td>\n",
              "      <td>33847694.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>9784.0</td>\n",
              "      <td>33847694.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>2079.0</td>\n",
              "      <td>33847694.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>60237.0</td>\n",
              "      <td>33847694.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>210448.0</td>\n",
              "      <td>33847694.0</td>\n",
              "      <td>6.217499</td>\n",
              "      <td>6.190935</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fae83d1-f98c-4637-8ac2-2b75ff7061a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2fae83d1-f98c-4637-8ac2-2b75ff7061a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2fae83d1-f98c-4637-8ac2-2b75ff7061a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0a644771-0072-45e8-b82a-a7970f4e8cf7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a644771-0072-45e8-b82a-a7970f4e8cf7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0a644771-0072-45e8-b82a-a7970f4e8cf7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 146
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "While changing the value of one of the crimes I noticed that there was a value named: Jurisdiction does not report. Lets dive deeper into this and see if we can drop these values"
      ],
      "metadata": {
        "id": "oesFSyb_I-rl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['strata_level_name'].unique()"
      ],
      "metadata": {
        "id": "3T1h3_Ee9Wg_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e718d064-5ff0-4dee-f599-7bd1d53011d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<StringArray>\n",
              "[                   'Aggravated assault',\n",
              "                         'Sexual assult',\n",
              " 'Murder and non-negligent manslaughter',\n",
              "                               'Robbery',\n",
              "                   'Violent crime total',\n",
              "          'Jurisdiction does not report']\n",
              "Length: 6, dtype: string"
            ]
          },
          "metadata": {},
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# create subset where jurisdiction does not report\n",
        "df_dnr = df[df['strata_level_name'] == 'Jurisdiction does not report']\n"
      ],
      "metadata": {
        "id": "jnbH_z6q9WRp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# see overview of the dataframe where jurisdiction does not report\n",
        "df_dnr.info()"
      ],
      "metadata": {
        "id": "TCg2E5Bg_V4X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9614176b-0082-4c09-dd6e-249b689ae67d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 10166 entries, 295 to 49155\n",
            "Data columns (total 24 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   reportyear              10166 non-null  float64\n",
            " 1   race_eth_code           10166 non-null  float64\n",
            " 2   race_eth_name           10166 non-null  object \n",
            " 3   geotype                 10166 non-null  object \n",
            " 4   geotypevalue            10166 non-null  float64\n",
            " 5   geoname                 10166 non-null  object \n",
            " 6   county_fips             10166 non-null  float64\n",
            " 7   county_name             10166 non-null  object \n",
            " 8   region_code             10166 non-null  float64\n",
            " 9   region_name             10166 non-null  object \n",
            " 10  strata_name_code        10166 non-null  float64\n",
            " 11  strata_name             10166 non-null  object \n",
            " 12  strata_level_name_code  10166 non-null  float64\n",
            " 13  strata_level_name       10166 non-null  string \n",
            " 14  numerator               0 non-null      float64\n",
            " 15  denominator             0 non-null      float64\n",
            " 16  rate                    0 non-null      float64\n",
            " 17  ll_95ci                 0 non-null      float64\n",
            " 18  ul_95ci                 0 non-null      float64\n",
            " 19  se                      0 non-null      float64\n",
            " 20  rse                     0 non-null      float64\n",
            " 21  ca_decile               0 non-null      float64\n",
            " 22  ca_rr                   0 non-null      float64\n",
            " 23  dof_population          90 non-null     float64\n",
            "dtypes: float64(17), object(6), string(1)\n",
            "memory usage: 1.9+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# all the crime data is null for these rows because these are all unincorporated communities. I do not see where these rows would have much importance to analyzing crime in california over 13 years. We will drop the rows\n",
        "\n",
        "# take index of all rows in the unincorporated community data frame\n",
        "dnr_indexes = df_dnr.index\n",
        "print(dnr_indexes)"
      ],
      "metadata": {
        "id": "VTGv-Mir9VzI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c38a40de-c414-4f30-9ed4-6cef9be710c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index([  295,   311,   327,   328,   329,   330,   331,   332,   333,   339,\n",
            "       ...\n",
            "       49116, 49122, 49123, 49124, 49125, 49126, 49132, 49133, 49134, 49155],\n",
            "      dtype='int64', length=10166)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# drop unincorporated indexes from our data set\n",
        "df.drop(index=dnr_indexes, inplace = True)\n",
        "df.info()"
      ],
      "metadata": {
        "id": "5fnlGWOZPzIK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a87f5601-db91-43cb-a5ad-e1283c8423f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 39060 entries, 0 to 49225\n",
            "Data columns (total 24 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   reportyear              39060 non-null  float64\n",
            " 1   race_eth_code           39060 non-null  float64\n",
            " 2   race_eth_name           39060 non-null  object \n",
            " 3   geotype                 39060 non-null  object \n",
            " 4   geotypevalue            39060 non-null  float64\n",
            " 5   geoname                 39060 non-null  object \n",
            " 6   county_fips             38010 non-null  float64\n",
            " 7   county_name             38010 non-null  object \n",
            " 8   region_code             38990 non-null  float64\n",
            " 9   region_name             38990 non-null  object \n",
            " 10  strata_name_code        39060 non-null  float64\n",
            " 11  strata_name             39060 non-null  object \n",
            " 12  strata_level_name_code  39060 non-null  float64\n",
            " 13  strata_level_name       39060 non-null  string \n",
            " 14  numerator               32293 non-null  float64\n",
            " 15  denominator             37090 non-null  float64\n",
            " 16  rate                    7323 non-null   float64\n",
            " 17  ll_95ci                 7323 non-null   float64\n",
            " 18  ul_95ci                 7323 non-null   float64\n",
            " 19  se                      7323 non-null   float64\n",
            " 20  rse                     7323 non-null   float64\n",
            " 21  ca_decile               6301 non-null   float64\n",
            " 22  ca_rr                   7323 non-null   float64\n",
            " 23  dof_population          38570 non-null  float64\n",
            "dtypes: float64(17), object(6), string(1)\n",
            "memory usage: 7.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We have dropped the unincorporated coummunity rows with no crime data. Almost done cleaning!"
      ],
      "metadata": {
        "id": "89O0kePoSW6Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# explore the null values we have in the nummerator. Are they missing values/not reported or are they 0s\n",
        "df_no_num = df[df['numerator'].isnull()]\n",
        "df_no_num.head()"
      ],
      "metadata": {
        "id": "oTOpRRUMSY5I",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "outputId": "8da14ec2-c866-410e-ade3-440e417cda95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     reportyear  race_eth_code race_eth_name geotype  geotypevalue   geoname  \\\n",
              "12       2000.0            9.0         Total      CO        6003.0    Alpine   \n",
              "13       2000.0            9.0         Total      CO        6003.0    Alpine   \n",
              "92       2000.0            9.0         Total      CO        6035.0    Lassen   \n",
              "112      2000.0            9.0         Total      CO        6043.0  Mariposa   \n",
              "127      2000.0            9.0         Total      CO        6049.0     Modoc   \n",
              "\n",
              "     county_fips county_name  region_code               region_name  \\\n",
              "12        6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "13        6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "92        6035.0      Lassen          6.0          Northeast Sierra   \n",
              "112       6043.0    Mariposa          3.0  Central/Southeast Sierra   \n",
              "127       6049.0       Modoc          6.0          Northeast Sierra   \n",
              "\n",
              "     strata_name_code            strata_name  strata_level_name_code  \\\n",
              "12                1.0  Type of violent crime                     3.0   \n",
              "13                1.0  Type of violent crime                     4.0   \n",
              "92                1.0  Type of violent crime                     3.0   \n",
              "112               1.0  Type of violent crime                     3.0   \n",
              "127               1.0  Type of violent crime                     3.0   \n",
              "\n",
              "                         strata_level_name  numerator  denominator  rate  \\\n",
              "12   Murder and non-negligent manslaughter        NaN       1208.0   NaN   \n",
              "13                                 Robbery        NaN       1208.0   NaN   \n",
              "92   Murder and non-negligent manslaughter        NaN      33828.0   NaN   \n",
              "112  Murder and non-negligent manslaughter        NaN      17130.0   NaN   \n",
              "127  Murder and non-negligent manslaughter        NaN       9449.0   NaN   \n",
              "\n",
              "     ll_95ci  ul_95ci  se  rse  ca_decile  ca_rr  dof_population  \n",
              "12       NaN      NaN NaN  NaN        NaN    NaN          1208.0  \n",
              "13       NaN      NaN NaN  NaN        NaN    NaN          1208.0  \n",
              "92       NaN      NaN NaN  NaN        NaN    NaN         33828.0  \n",
              "112      NaN      NaN NaN  NaN        NaN    NaN         17130.0  \n",
              "127      NaN      NaN NaN  NaN        NaN    NaN          9449.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e6c9c19a-b0bf-4047-a875-a783895267f9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1208.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1208.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1208.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1208.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>92</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6035.0</td>\n",
              "      <td>Lassen</td>\n",
              "      <td>6035.0</td>\n",
              "      <td>Lassen</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Northeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33828.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33828.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6043.0</td>\n",
              "      <td>Mariposa</td>\n",
              "      <td>6043.0</td>\n",
              "      <td>Mariposa</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17130.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17130.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6049.0</td>\n",
              "      <td>Modoc</td>\n",
              "      <td>6049.0</td>\n",
              "      <td>Modoc</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Northeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9449.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9449.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6c9c19a-b0bf-4047-a875-a783895267f9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e6c9c19a-b0bf-4047-a875-a783895267f9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e6c9c19a-b0bf-4047-a875-a783895267f9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3df699a5-fbff-4b35-aa61-e7b62e05bac8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3df699a5-fbff-4b35-aa61-e7b62e05bac8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3df699a5-fbff-4b35-aa61-e7b62e05bac8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_no_num"
            }
          },
          "metadata": {},
          "execution_count": 152
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[df['county_fips'] == 6003.0]"
      ],
      "metadata": {
        "id": "9-za-t23SiDq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "outputId": "9addfb4e-00c7-46f4-8046-00a826138592"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       reportyear  race_eth_code race_eth_name geotype  geotypevalue geoname  \\\n",
              "10         2000.0            9.0         Total      CO        6003.0  Alpine   \n",
              "11         2000.0            9.0         Total      CO        6003.0  Alpine   \n",
              "12         2000.0            9.0         Total      CO        6003.0  Alpine   \n",
              "13         2000.0            9.0         Total      CO        6003.0  Alpine   \n",
              "14         2000.0            9.0         Total      CO        6003.0  Alpine   \n",
              "...           ...            ...           ...     ...           ...     ...   \n",
              "45410      2013.0            9.0         Total      CO        6003.0  Alpine   \n",
              "45411      2013.0            9.0         Total      CO        6003.0  Alpine   \n",
              "45412      2013.0            9.0         Total      CO        6003.0  Alpine   \n",
              "45413      2013.0            9.0         Total      CO        6003.0  Alpine   \n",
              "45414      2013.0            9.0         Total      CO        6003.0  Alpine   \n",
              "\n",
              "       county_fips county_name  region_code               region_name  \\\n",
              "10          6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "11          6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "12          6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "13          6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "14          6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "...            ...         ...          ...                       ...   \n",
              "45410       6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "45411       6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "45412       6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "45413       6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "45414       6003.0      Alpine          3.0  Central/Southeast Sierra   \n",
              "\n",
              "       strata_name_code            strata_name  strata_level_name_code  \\\n",
              "10                  1.0  Type of violent crime                     1.0   \n",
              "11                  1.0  Type of violent crime                     2.0   \n",
              "12                  1.0  Type of violent crime                     3.0   \n",
              "13                  1.0  Type of violent crime                     4.0   \n",
              "14                  1.0  Type of violent crime                     5.0   \n",
              "...                 ...                    ...                     ...   \n",
              "45410               1.0  Type of violent crime                     1.0   \n",
              "45411               1.0  Type of violent crime                     2.0   \n",
              "45412               1.0  Type of violent crime                     3.0   \n",
              "45413               1.0  Type of violent crime                     4.0   \n",
              "45414               1.0  Type of violent crime                     5.0   \n",
              "\n",
              "                           strata_level_name  numerator  denominator  \\\n",
              "10                        Aggravated assault        9.0       1208.0   \n",
              "11                             Sexual assult        1.0       1208.0   \n",
              "12     Murder and non-negligent manslaughter        NaN       1208.0   \n",
              "13                                   Robbery        NaN       1208.0   \n",
              "14                       Violent crime total       10.0       1208.0   \n",
              "...                                      ...        ...          ...   \n",
              "45410                     Aggravated assault        6.0       1121.0   \n",
              "45411                          Sexual assult        NaN       1121.0   \n",
              "45412  Murder and non-negligent manslaughter        NaN       1121.0   \n",
              "45413                                Robbery        NaN       1121.0   \n",
              "45414                    Violent crime total        6.0       1121.0   \n",
              "\n",
              "           rate   ll_95ci    ul_95ci        se        rse  ca_decile  \\\n",
              "10          NaN       NaN        NaN       NaN        NaN        NaN   \n",
              "11          NaN       NaN        NaN       NaN        NaN        NaN   \n",
              "12          NaN       NaN        NaN       NaN        NaN        NaN   \n",
              "13          NaN       NaN        NaN       NaN        NaN        NaN   \n",
              "14     8.278146  3.147298  13.408994  2.617780  31.622777        NaN   \n",
              "...         ...       ...        ...       ...        ...        ...   \n",
              "45410       NaN       NaN        NaN       NaN        NaN        NaN   \n",
              "45411       NaN       NaN        NaN       NaN        NaN        NaN   \n",
              "45412       NaN       NaN        NaN       NaN        NaN        NaN   \n",
              "45413       NaN       NaN        NaN       NaN        NaN        NaN   \n",
              "45414  5.352364  1.069581   9.635147  2.185093  40.824829        NaN   \n",
              "\n",
              "          ca_rr  dof_population  \n",
              "10          NaN          1208.0  \n",
              "11          NaN          1208.0  \n",
              "12          NaN          1208.0  \n",
              "13          NaN          1208.0  \n",
              "14     1.331427          1208.0  \n",
              "...         ...             ...  \n",
              "45410       NaN          1123.0  \n",
              "45411       NaN          1123.0  \n",
              "45412       NaN          1123.0  \n",
              "45413       NaN          1123.0  \n",
              "45414  1.351935          1123.0  \n",
              "\n",
              "[70 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e5d120c8-604b-4ba5-bb66-58c644240215\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1208.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1208.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1208.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1208.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1208.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1208.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1208.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1208.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2000.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1208.0</td>\n",
              "      <td>8.278146</td>\n",
              "      <td>3.147298</td>\n",
              "      <td>13.408994</td>\n",
              "      <td>2.617780</td>\n",
              "      <td>31.622777</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.331427</td>\n",
              "      <td>1208.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45410</th>\n",
              "      <td>2013.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1121.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1123.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45411</th>\n",
              "      <td>2013.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1121.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1123.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45412</th>\n",
              "      <td>2013.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1121.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1123.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45413</th>\n",
              "      <td>2013.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1121.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1123.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45414</th>\n",
              "      <td>2013.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>6003.0</td>\n",
              "      <td>Alpine</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1121.0</td>\n",
              "      <td>5.352364</td>\n",
              "      <td>1.069581</td>\n",
              "      <td>9.635147</td>\n",
              "      <td>2.185093</td>\n",
              "      <td>40.824829</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.351935</td>\n",
              "      <td>1123.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>70 rows × 24 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5d120c8-604b-4ba5-bb66-58c644240215')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e5d120c8-604b-4ba5-bb66-58c644240215 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e5d120c8-604b-4ba5-bb66-58c644240215');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-42fd71d2-95aa-4dc5-8f67-a3aa83825309\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-42fd71d2-95aa-4dc5-8f67-a3aa83825309')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-42fd71d2-95aa-4dc5-8f67-a3aa83825309 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The nulls in numerator appear to be 0s not a lack of reporting, as the sum of crimes in a given year mathces the \"violent crime total\". double check this"
      ],
      "metadata": {
        "id": "LhLw37fvaEV3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pd.set_option('display.max_columns', None)"
      ],
      "metadata": {
        "id": "AuHzn1hJUV74"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# change type for numerical values to integers\n",
        "\n",
        "df['reportyear'] = df['reportyear'].convert_dtypes(convert_integer= True)\n",
        "df['numerator'] = df['numerator'].convert_dtypes(convert_integer= True)\n",
        "df['denominator'] = df['denominator'].convert_dtypes(convert_integer= True)"
      ],
      "metadata": {
        "id": "Vox5sl63lQAz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# take the violent crime total value and put it in a variable\n",
        "x = df[df['strata_level_name_code'] == 5.0]['numerator']\n",
        "\n",
        "# take the other 4 violent crime values and store them in a series\n",
        "y = df[df['strata_level_name_code'] != 5.0]['numerator']\n",
        "\n",
        "#replace nulls with 0s\n",
        "y.fillna(0,inplace=True)\n",
        "\n",
        "# in theory, the sum of both should be equal to each other.\n",
        "print(x.sum())\n",
        "print(y.sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p0oyx37tgmTn",
        "outputId": "18dec155-aecc-49f4-dc75-5ceaf60da8b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9981287\n",
            "9980829\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-156-2866907325.py:8: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  y.fillna(0,inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# our sums don't add up and below is an example of that. There may have been some miscalculation or misreporting.\n",
        "\n",
        "df[(df['geotype'] == 'CA') & (df['reportyear'] == 2000)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "id": "NXScmCY-jZu_",
        "outputId": "86babc91-fe1d-43ff-9ba3-a9e4a8a1d652"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   reportyear  race_eth_code race_eth_name geotype  geotypevalue     geoname  \\\n",
              "0        2000            9.0         Total      CA           6.0  California   \n",
              "1        2000            9.0         Total      CA           6.0  California   \n",
              "2        2000            9.0         Total      CA           6.0  California   \n",
              "3        2000            9.0         Total      CA           6.0  California   \n",
              "4        2000            9.0         Total      CA           6.0  California   \n",
              "\n",
              "   county_fips county_name  region_code region_name  strata_name_code  \\\n",
              "0          NaN         NaN          NaN         NaN               1.0   \n",
              "1          NaN         NaN          NaN         NaN               1.0   \n",
              "2          NaN         NaN          NaN         NaN               1.0   \n",
              "3          NaN         NaN          NaN         NaN               1.0   \n",
              "4          NaN         NaN          NaN         NaN               1.0   \n",
              "\n",
              "             strata_name  strata_level_name_code  \\\n",
              "0  Type of violent crime                     1.0   \n",
              "1  Type of violent crime                     2.0   \n",
              "2  Type of violent crime                     3.0   \n",
              "3  Type of violent crime                     4.0   \n",
              "4  Type of violent crime                     5.0   \n",
              "\n",
              "                       strata_level_name  numerator  denominator      rate  \\\n",
              "0                     Aggravated assault     138325     33847694       NaN   \n",
              "1                          Sexual assult       9784     33847694       NaN   \n",
              "2  Murder and non-negligent manslaughter       2079     33847694       NaN   \n",
              "3                                Robbery      60237     33847694       NaN   \n",
              "4                    Violent crime total     210448     33847694  6.217499   \n",
              "\n",
              "    ll_95ci   ul_95ci        se       rse  ca_decile  ca_rr  dof_population  \n",
              "0       NaN       NaN       NaN       NaN        NaN    NaN      33873086.0  \n",
              "1       NaN       NaN       NaN       NaN        NaN    NaN      33873086.0  \n",
              "2       NaN       NaN       NaN       NaN        NaN    NaN      33873086.0  \n",
              "3       NaN       NaN       NaN       NaN        NaN    NaN      33873086.0  \n",
              "4  6.190935  6.244063  0.013553  0.217985        NaN    1.0      33873086.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fab31e30-ca8e-421b-b569-6ac8a2300ff9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>138325</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>9784</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>2079</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>60237</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>210448</td>\n",
              "      <td>33847694</td>\n",
              "      <td>6.217499</td>\n",
              "      <td>6.190935</td>\n",
              "      <td>6.244063</td>\n",
              "      <td>0.013553</td>\n",
              "      <td>0.217985</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fab31e30-ca8e-421b-b569-6ac8a2300ff9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fab31e30-ca8e-421b-b569-6ac8a2300ff9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fab31e30-ca8e-421b-b569-6ac8a2300ff9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d2b0fdc2-567d-4599-8daf-a9a38055908d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d2b0fdc2-567d-4599-8daf-a9a38055908d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d2b0fdc2-567d-4599-8daf-a9a38055908d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# example of how above numbers do not match 'Violent crime total' in row 5\n",
        "138325+9784+2079+60237"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6RRJqhQGw5qz",
        "outputId": "46c4b8d1-4119-46b1-9db3-17d661497f6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "210425"
            ]
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Assuming that null values are 0s and not miss reproted values"
      ],
      "metadata": {
        "id": "UB9zoil0KZdD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['numerator'].fillna(0, inplace = True)"
      ],
      "metadata": {
        "id": "TZ8xUsZEIiAU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "475f329f-e467-4ae3-f257-9715fbcda37c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-159-4187749483.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df['numerator'].fillna(0, inplace = True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since our violent crime totals seem to be off, we need to correctly add up the numerator colum so that the violent crime total is equal to all the recorded crimes that come before it."
      ],
      "metadata": {
        "id": "vMhU2U1Br0Pf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a copy of df to work on\n",
        "df_fixed = df.copy()\n",
        "\n",
        "# sort df values\n",
        "df_fixed.sort_values(['reportyear', 'geotype','geoname',  'strata_level_name_code'])\n",
        "\n",
        "def calculate_corrected_total(group):\n",
        "    # Create a mask for individual crime categories (codes 1-4)\n",
        "    # creates a new bool column for values 1-4\n",
        "    individual_crimes_mask = group['strata_level_name_code'].isin([1, 2, 3, 4])\n",
        "\n",
        "\n",
        "    # Create a copy of the group\n",
        "    group_copy = group.copy()\n",
        "\n",
        "    # Calculate cumulative sum only for individual crimes\n",
        "    group_copy['temp_cumsum'] = 0\n",
        "    group_copy.loc[individual_crimes_mask, 'temp_cumsum'] = group_copy.loc[individual_crimes_mask, 'numerator'].cumsum()\n",
        "\n",
        "    # For the total row (code 5), use the maximum cumsum value from individual crimes\n",
        "    # create another bool column but for only if code is 5\n",
        "    total_mask = group_copy['strata_level_name_code'] == 5\n",
        "    if total_mask.any():\n",
        "        correct_total = group_copy.loc[individual_crimes_mask, 'temp_cumsum'].max()\n",
        "        group_copy.loc[total_mask, 'numerator'] = correct_total\n",
        "\n",
        "    # Clean up temporary column\n",
        "    group_copy = group_copy.drop('temp_cumsum', axis=1)\n",
        "    return group_copy\n",
        "\n",
        "# Apply the correction to each geographic group\n",
        "grouping_cols = ['reportyear', 'geoname', 'geotype']\n",
        "df_fixed = df_fixed.groupby(grouping_cols, group_keys=False).apply(calculate_corrected_total)\n"
      ],
      "metadata": {
        "id": "8CwxDh1NKhn6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "557a4e1c-9ef5-4703-888d-d6810f2f734b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-160-2365864012.py:33: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  df_fixed = df_fixed.groupby(grouping_cols, group_keys=False).apply(calculate_corrected_total)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_fixed.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 591
        },
        "id": "aB-aURlL0V6G",
        "outputId": "a19e0499-b540-4de4-dfe2-ce4d01dd9fe7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   reportyear  race_eth_code race_eth_name geotype  geotypevalue     geoname  \\\n",
              "0        2000            9.0         Total      CA           6.0  California   \n",
              "1        2000            9.0         Total      CA           6.0  California   \n",
              "2        2000            9.0         Total      CA           6.0  California   \n",
              "3        2000            9.0         Total      CA           6.0  California   \n",
              "4        2000            9.0         Total      CA           6.0  California   \n",
              "5        2000            9.0         Total      CO        6001.0     Alameda   \n",
              "6        2000            9.0         Total      CO        6001.0     Alameda   \n",
              "7        2000            9.0         Total      CO        6001.0     Alameda   \n",
              "8        2000            9.0         Total      CO        6001.0     Alameda   \n",
              "9        2000            9.0         Total      CO        6001.0     Alameda   \n",
              "\n",
              "   county_fips county_name  region_code region_name  strata_name_code  \\\n",
              "0          NaN         NaN          NaN         NaN               1.0   \n",
              "1          NaN         NaN          NaN         NaN               1.0   \n",
              "2          NaN         NaN          NaN         NaN               1.0   \n",
              "3          NaN         NaN          NaN         NaN               1.0   \n",
              "4          NaN         NaN          NaN         NaN               1.0   \n",
              "5       6001.0     Alameda          1.0    Bay Area               1.0   \n",
              "6       6001.0     Alameda          1.0    Bay Area               1.0   \n",
              "7       6001.0     Alameda          1.0    Bay Area               1.0   \n",
              "8       6001.0     Alameda          1.0    Bay Area               1.0   \n",
              "9       6001.0     Alameda          1.0    Bay Area               1.0   \n",
              "\n",
              "             strata_name  strata_level_name_code  \\\n",
              "0  Type of violent crime                     1.0   \n",
              "1  Type of violent crime                     2.0   \n",
              "2  Type of violent crime                     3.0   \n",
              "3  Type of violent crime                     4.0   \n",
              "4  Type of violent crime                     5.0   \n",
              "5  Type of violent crime                     1.0   \n",
              "6  Type of violent crime                     2.0   \n",
              "7  Type of violent crime                     3.0   \n",
              "8  Type of violent crime                     4.0   \n",
              "9  Type of violent crime                     5.0   \n",
              "\n",
              "                       strata_level_name  numerator  denominator      rate  \\\n",
              "0                     Aggravated assault     138325     33847694       NaN   \n",
              "1                          Sexual assult       9784     33847694       NaN   \n",
              "2  Murder and non-negligent manslaughter       2079     33847694       NaN   \n",
              "3                                Robbery      60237     33847694       NaN   \n",
              "4                    Violent crime total     210425     33847694  6.217499   \n",
              "5                     Aggravated assault       5457      1443741       NaN   \n",
              "6                          Sexual assult        568      1443741       NaN   \n",
              "7  Murder and non-negligent manslaughter        110      1443741       NaN   \n",
              "8                                Robbery       3368      1443741       NaN   \n",
              "9                    Violent crime total       9503      1443741  6.582206   \n",
              "\n",
              "    ll_95ci   ul_95ci        se       rse  ca_decile     ca_rr  dof_population  \n",
              "0       NaN       NaN       NaN       NaN        NaN       NaN      33873086.0  \n",
              "1       NaN       NaN       NaN       NaN        NaN       NaN      33873086.0  \n",
              "2       NaN       NaN       NaN       NaN        NaN       NaN      33873086.0  \n",
              "3       NaN       NaN       NaN       NaN        NaN       NaN      33873086.0  \n",
              "4  6.190935  6.244063  0.013553  0.217985        NaN  1.000000      33873086.0  \n",
              "5       NaN       NaN       NaN       NaN        NaN       NaN       1443939.0  \n",
              "6       NaN       NaN       NaN       NaN        NaN       NaN       1443939.0  \n",
              "7       NaN       NaN       NaN       NaN        NaN       NaN       1443939.0  \n",
              "8       NaN       NaN       NaN       NaN        NaN       NaN       1443939.0  \n",
              "9  6.449864  6.714547  0.067521  1.025816        NaN  1.058658       1443939.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-36b27728-04a8-4fb2-a56e-c49f75ab7afe\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>138325</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>9784</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>2079</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>60237</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>210425</td>\n",
              "      <td>33847694</td>\n",
              "      <td>6.217499</td>\n",
              "      <td>6.190935</td>\n",
              "      <td>6.244063</td>\n",
              "      <td>0.013553</td>\n",
              "      <td>0.217985</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>5457</td>\n",
              "      <td>1443741</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1443939.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>568</td>\n",
              "      <td>1443741</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1443939.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>110</td>\n",
              "      <td>1443741</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1443939.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>3368</td>\n",
              "      <td>1443741</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1443939.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>9503</td>\n",
              "      <td>1443741</td>\n",
              "      <td>6.582206</td>\n",
              "      <td>6.449864</td>\n",
              "      <td>6.714547</td>\n",
              "      <td>0.067521</td>\n",
              "      <td>1.025816</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.058658</td>\n",
              "      <td>1443939.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36b27728-04a8-4fb2-a56e-c49f75ab7afe')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-36b27728-04a8-4fb2-a56e-c49f75ab7afe button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-36b27728-04a8-4fb2-a56e-c49f75ab7afe');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1085e311-3674-460a-8553-e8ecb7370d67\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1085e311-3674-460a-8553-e8ecb7370d67')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1085e311-3674-460a-8553-e8ecb7370d67 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_fixed"
            }
          },
          "metadata": {},
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 591
        },
        "id": "I6j4jbt30dwd",
        "outputId": "cb1a7ca6-8254-4f00-ec5a-3369ba39d90c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   reportyear  race_eth_code race_eth_name geotype  geotypevalue     geoname  \\\n",
              "0        2000            9.0         Total      CA           6.0  California   \n",
              "1        2000            9.0         Total      CA           6.0  California   \n",
              "2        2000            9.0         Total      CA           6.0  California   \n",
              "3        2000            9.0         Total      CA           6.0  California   \n",
              "4        2000            9.0         Total      CA           6.0  California   \n",
              "5        2000            9.0         Total      CO        6001.0     Alameda   \n",
              "6        2000            9.0         Total      CO        6001.0     Alameda   \n",
              "7        2000            9.0         Total      CO        6001.0     Alameda   \n",
              "8        2000            9.0         Total      CO        6001.0     Alameda   \n",
              "9        2000            9.0         Total      CO        6001.0     Alameda   \n",
              "\n",
              "   county_fips county_name  region_code region_name  strata_name_code  \\\n",
              "0          NaN         NaN          NaN         NaN               1.0   \n",
              "1          NaN         NaN          NaN         NaN               1.0   \n",
              "2          NaN         NaN          NaN         NaN               1.0   \n",
              "3          NaN         NaN          NaN         NaN               1.0   \n",
              "4          NaN         NaN          NaN         NaN               1.0   \n",
              "5       6001.0     Alameda          1.0    Bay Area               1.0   \n",
              "6       6001.0     Alameda          1.0    Bay Area               1.0   \n",
              "7       6001.0     Alameda          1.0    Bay Area               1.0   \n",
              "8       6001.0     Alameda          1.0    Bay Area               1.0   \n",
              "9       6001.0     Alameda          1.0    Bay Area               1.0   \n",
              "\n",
              "             strata_name  strata_level_name_code  \\\n",
              "0  Type of violent crime                     1.0   \n",
              "1  Type of violent crime                     2.0   \n",
              "2  Type of violent crime                     3.0   \n",
              "3  Type of violent crime                     4.0   \n",
              "4  Type of violent crime                     5.0   \n",
              "5  Type of violent crime                     1.0   \n",
              "6  Type of violent crime                     2.0   \n",
              "7  Type of violent crime                     3.0   \n",
              "8  Type of violent crime                     4.0   \n",
              "9  Type of violent crime                     5.0   \n",
              "\n",
              "                       strata_level_name  numerator  denominator      rate  \\\n",
              "0                     Aggravated assault     138325     33847694       NaN   \n",
              "1                          Sexual assult       9784     33847694       NaN   \n",
              "2  Murder and non-negligent manslaughter       2079     33847694       NaN   \n",
              "3                                Robbery      60237     33847694       NaN   \n",
              "4                    Violent crime total     210448     33847694  6.217499   \n",
              "5                     Aggravated assault       5457      1443741       NaN   \n",
              "6                          Sexual assult        568      1443741       NaN   \n",
              "7  Murder and non-negligent manslaughter        110      1443741       NaN   \n",
              "8                                Robbery       3368      1443741       NaN   \n",
              "9                    Violent crime total       9503      1443741  6.582206   \n",
              "\n",
              "    ll_95ci   ul_95ci        se       rse  ca_decile     ca_rr  dof_population  \n",
              "0       NaN       NaN       NaN       NaN        NaN       NaN      33873086.0  \n",
              "1       NaN       NaN       NaN       NaN        NaN       NaN      33873086.0  \n",
              "2       NaN       NaN       NaN       NaN        NaN       NaN      33873086.0  \n",
              "3       NaN       NaN       NaN       NaN        NaN       NaN      33873086.0  \n",
              "4  6.190935  6.244063  0.013553  0.217985        NaN  1.000000      33873086.0  \n",
              "5       NaN       NaN       NaN       NaN        NaN       NaN       1443939.0  \n",
              "6       NaN       NaN       NaN       NaN        NaN       NaN       1443939.0  \n",
              "7       NaN       NaN       NaN       NaN        NaN       NaN       1443939.0  \n",
              "8       NaN       NaN       NaN       NaN        NaN       NaN       1443939.0  \n",
              "9  6.449864  6.714547  0.067521  1.025816        NaN  1.058658       1443939.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-58070aec-248a-401b-8075-4b7474d68617\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>138325</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>9784</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>2079</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>60237</td>\n",
              "      <td>33847694</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>210448</td>\n",
              "      <td>33847694</td>\n",
              "      <td>6.217499</td>\n",
              "      <td>6.190935</td>\n",
              "      <td>6.244063</td>\n",
              "      <td>0.013553</td>\n",
              "      <td>0.217985</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>33873086.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>5457</td>\n",
              "      <td>1443741</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1443939.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>568</td>\n",
              "      <td>1443741</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1443939.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>110</td>\n",
              "      <td>1443741</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1443939.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>3368</td>\n",
              "      <td>1443741</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1443939.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>CO</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>6001.0</td>\n",
              "      <td>Alameda</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>9503</td>\n",
              "      <td>1443741</td>\n",
              "      <td>6.582206</td>\n",
              "      <td>6.449864</td>\n",
              "      <td>6.714547</td>\n",
              "      <td>0.067521</td>\n",
              "      <td>1.025816</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.058658</td>\n",
              "      <td>1443939.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-58070aec-248a-401b-8075-4b7474d68617')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-58070aec-248a-401b-8075-4b7474d68617 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-58070aec-248a-401b-8075-4b7474d68617');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-70442b1e-1b81-4b25-86b9-1cf25e5a56e2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-70442b1e-1b81-4b25-86b9-1cf25e5a56e2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-70442b1e-1b81-4b25-86b9-1cf25e5a56e2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# take the violent crime total value and put it in a variable\n",
        "x = df_fixed[(df_fixed['strata_level_name_code'] == 5.0) & (df_fixed['geotype'] == 'PL')]['numerator']\n",
        "\n",
        "# take the other 4 violent crime values and store them in a series\n",
        "y = df_fixed[(df_fixed['strata_level_name_code'] != 5) & (df_fixed['geotype'] == 'PL')]['numerator']\n",
        "\n",
        "\n",
        "\n",
        "# in theory, the sum of both should be equal to each other.\n",
        "print(x.sum())\n",
        "print(y.sum())"
      ],
      "metadata": {
        "id": "Y1gOg4h_MV1U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ce7b5949-5918-4221-889a-5668674ddc0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2195278\n",
            "2181720\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# need to figure out why PL is off\n",
        "df_fixed_PL = df_fixed[df_fixed['geotype'] == 'PL']"
      ],
      "metadata": {
        "id": "RjcUnm2eJtGw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# we have 14 years worth of data for each city should appear 70 times in our data set. 1 for each violent crime plus once for the violent crime total\n",
        "\n",
        "((df_fixed_PL['geoname'].value_counts().sort_index()) == 70).unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hVI0JUM4DYBe",
        "outputId": "147c90d1-41c3-4c14-ecab-f285815e997a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ True, False])"
            ]
          },
          "metadata": {},
          "execution_count": 165
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# count how many times each city is in our data\n",
        "df_fixed_PL['geoname'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "Cqbo7FCd3z8e",
        "outputId": "d83bd0c2-d327-424d-a12c-ffd3b3327f02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "geoname\n",
              "Lake Elsinore city    140\n",
              "Porterville city      140\n",
              "Orange city           140\n",
              "Weed city             140\n",
              "Piedmont city          70\n",
              "                     ... \n",
              "Fremont city           70\n",
              "Fowler city            70\n",
              "Greenfield city        70\n",
              "Angels City city       50\n",
              "Angels city            20\n",
              "Name: count, Length: 482, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geoname</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lake Elsinore city</th>\n",
              "      <td>140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Porterville city</th>\n",
              "      <td>140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Orange city</th>\n",
              "      <td>140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Weed city</th>\n",
              "      <td>140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Piedmont city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fremont city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fowler city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Greenfield city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Angels City city</th>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Angels city</th>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>482 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 166
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# take a look at the city with 140 instances\n",
        "df_fixed_PL[(df_fixed_PL['geoname']== 'Porterville city') &  (df_fixed_PL['reportyear'] == 2000)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 591
        },
        "id": "4nHI0l9B4g0q",
        "outputId": "b8e46719-549a-479b-ee4a-139c93b3ca81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      reportyear  race_eth_code race_eth_name geotype  geotypevalue  \\\n",
              "2374        2000            9.0         Total      PL       58240.0   \n",
              "2375        2000            9.0         Total      PL       58240.0   \n",
              "2376        2000            9.0         Total      PL       58240.0   \n",
              "2377        2000            9.0         Total      PL       58240.0   \n",
              "2378        2000            9.0         Total      PL       58240.0   \n",
              "2379        2000            9.0         Total      PL       58240.0   \n",
              "2380        2000            9.0         Total      PL       58240.0   \n",
              "2381        2000            9.0         Total      PL       58240.0   \n",
              "2382        2000            9.0         Total      PL       58240.0   \n",
              "2383        2000            9.0         Total      PL       58240.0   \n",
              "\n",
              "               geoname  county_fips county_name  region_code  \\\n",
              "2374  Porterville city       6107.0      Tulare         10.0   \n",
              "2375  Porterville city       6107.0      Tulare         10.0   \n",
              "2376  Porterville city       6107.0      Tulare         10.0   \n",
              "2377  Porterville city       6107.0      Tulare         10.0   \n",
              "2378  Porterville city       6107.0      Tulare         10.0   \n",
              "2379  Porterville city       6107.0      Tulare         10.0   \n",
              "2380  Porterville city       6107.0      Tulare         10.0   \n",
              "2381  Porterville city       6107.0      Tulare         10.0   \n",
              "2382  Porterville city       6107.0      Tulare         10.0   \n",
              "2383  Porterville city       6107.0      Tulare         10.0   \n",
              "\n",
              "             region_name  strata_name_code            strata_name  \\\n",
              "2374  San Joaquin Valley               1.0  Type of violent crime   \n",
              "2375  San Joaquin Valley               1.0  Type of violent crime   \n",
              "2376  San Joaquin Valley               1.0  Type of violent crime   \n",
              "2377  San Joaquin Valley               1.0  Type of violent crime   \n",
              "2378  San Joaquin Valley               1.0  Type of violent crime   \n",
              "2379  San Joaquin Valley               1.0  Type of violent crime   \n",
              "2380  San Joaquin Valley               1.0  Type of violent crime   \n",
              "2381  San Joaquin Valley               1.0  Type of violent crime   \n",
              "2382  San Joaquin Valley               1.0  Type of violent crime   \n",
              "2383  San Joaquin Valley               1.0  Type of violent crime   \n",
              "\n",
              "      strata_level_name_code                      strata_level_name  \\\n",
              "2374                     1.0                     Aggravated assault   \n",
              "2375                     1.0                     Aggravated assault   \n",
              "2376                     2.0                          Sexual assult   \n",
              "2377                     2.0                          Sexual assult   \n",
              "2378                     3.0  Murder and non-negligent manslaughter   \n",
              "2379                     3.0  Murder and non-negligent manslaughter   \n",
              "2380                     4.0                                Robbery   \n",
              "2381                     4.0                                Robbery   \n",
              "2382                     5.0                    Violent crime total   \n",
              "2383                     5.0                    Violent crime total   \n",
              "\n",
              "      numerator  denominator      rate  ll_95ci   ul_95ci        se      rse  \\\n",
              "2374        132         <NA>       NaN      NaN       NaN       NaN      NaN   \n",
              "2375        132        39615       NaN      NaN       NaN       NaN      NaN   \n",
              "2376          7         <NA>       NaN      NaN       NaN       NaN      NaN   \n",
              "2377          7        39615       NaN      NaN       NaN       NaN      NaN   \n",
              "2378          0         <NA>       NaN      NaN       NaN       NaN      NaN   \n",
              "2379          0        39615       NaN      NaN       NaN       NaN      NaN   \n",
              "2380         35         <NA>       NaN      NaN       NaN       NaN      NaN   \n",
              "2381         35        39615       NaN      NaN       NaN       NaN      NaN   \n",
              "2382        348         <NA>       NaN      NaN       NaN       NaN      NaN   \n",
              "2383        348        39615  4.392276  3.73964  5.044912  0.332978  7.58098   \n",
              "\n",
              "      ca_decile     ca_rr  dof_population  \n",
              "2374        NaN       NaN         39615.0  \n",
              "2375        NaN       NaN         39615.0  \n",
              "2376        NaN       NaN         39615.0  \n",
              "2377        NaN       NaN         39615.0  \n",
              "2378        NaN       NaN         39615.0  \n",
              "2379        NaN       NaN         39615.0  \n",
              "2380        NaN       NaN         39615.0  \n",
              "2381        NaN       NaN         39615.0  \n",
              "2382        NaN       NaN         39615.0  \n",
              "2383        5.0  0.706438         39615.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d0271b8f-eb4c-4bf3-b6de-bea694938f0c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2374</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>58240.0</td>\n",
              "      <td>Porterville city</td>\n",
              "      <td>6107.0</td>\n",
              "      <td>Tulare</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>132</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39615.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2375</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>58240.0</td>\n",
              "      <td>Porterville city</td>\n",
              "      <td>6107.0</td>\n",
              "      <td>Tulare</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>132</td>\n",
              "      <td>39615</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39615.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2376</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>58240.0</td>\n",
              "      <td>Porterville city</td>\n",
              "      <td>6107.0</td>\n",
              "      <td>Tulare</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>7</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39615.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2377</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>58240.0</td>\n",
              "      <td>Porterville city</td>\n",
              "      <td>6107.0</td>\n",
              "      <td>Tulare</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>7</td>\n",
              "      <td>39615</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39615.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2378</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>58240.0</td>\n",
              "      <td>Porterville city</td>\n",
              "      <td>6107.0</td>\n",
              "      <td>Tulare</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39615.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2379</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>58240.0</td>\n",
              "      <td>Porterville city</td>\n",
              "      <td>6107.0</td>\n",
              "      <td>Tulare</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>0</td>\n",
              "      <td>39615</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39615.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2380</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>58240.0</td>\n",
              "      <td>Porterville city</td>\n",
              "      <td>6107.0</td>\n",
              "      <td>Tulare</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>35</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39615.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2381</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>58240.0</td>\n",
              "      <td>Porterville city</td>\n",
              "      <td>6107.0</td>\n",
              "      <td>Tulare</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>35</td>\n",
              "      <td>39615</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39615.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2382</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>58240.0</td>\n",
              "      <td>Porterville city</td>\n",
              "      <td>6107.0</td>\n",
              "      <td>Tulare</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>348</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39615.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2383</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>58240.0</td>\n",
              "      <td>Porterville city</td>\n",
              "      <td>6107.0</td>\n",
              "      <td>Tulare</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>348</td>\n",
              "      <td>39615</td>\n",
              "      <td>4.392276</td>\n",
              "      <td>3.73964</td>\n",
              "      <td>5.044912</td>\n",
              "      <td>0.332978</td>\n",
              "      <td>7.58098</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.706438</td>\n",
              "      <td>39615.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d0271b8f-eb4c-4bf3-b6de-bea694938f0c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d0271b8f-eb4c-4bf3-b6de-bea694938f0c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d0271b8f-eb4c-4bf3-b6de-bea694938f0c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b799f8ed-a8d8-4a6f-864c-f1aa7eea389e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b799f8ed-a8d8-4a6f-864c-f1aa7eea389e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b799f8ed-a8d8-4a6f-864c-f1aa7eea389e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we are seeing that some of these cities are reporting twice for each crime. We need to drop duplicates\n",
        "df_fixed1 = df_fixed.copy()\n",
        "\n",
        "#drop rows based on the below columns. anything that has the same value in each one of these columns will be dropped\n",
        "df_fixed1.drop_duplicates(subset=[ 'reportyear', 'geotype', 'geoname', 'county_fips', 'strata_level_name_code','numerator'],inplace = True)\n",
        "\n",
        "# check\n",
        "df_fixed1[df_fixed1['geotype'] == 'PL']['geoname'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "mMgQiLIy60nt",
        "outputId": "8752053f-6e5c-4139-df69-9af7799223c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "geoname\n",
              "Yucca Valley town        70\n",
              "West Sacramento city     70\n",
              "Westmorland city         70\n",
              "Westminster city         70\n",
              "Westlake Village city    70\n",
              "                         ..\n",
              "Albany city              70\n",
              "Alameda city             70\n",
              "Agoura Hills city        70\n",
              "Angels City city         50\n",
              "Angels city              20\n",
              "Name: count, Length: 482, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geoname</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Yucca Valley town</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>West Sacramento city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Westmorland city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Westminster city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Westlake Village city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Albany city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Alameda city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Agoura Hills city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Angels City city</th>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Angels city</th>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>482 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Clean Angels City\n",
        "\n",
        "df_fixed1[df_fixed1['geoname' ]== 'Angels City city']['reportyear'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "_eoIa72E_vsX",
        "outputId": "32f3e5e7-418b-4ce7-9c8e-0717abf8566a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "reportyear\n",
              "2000    5\n",
              "2001    5\n",
              "2002    5\n",
              "2003    5\n",
              "2004    5\n",
              "2005    5\n",
              "2006    5\n",
              "2007    5\n",
              "2008    5\n",
              "2009    5\n",
              "Name: count, dtype: Int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reportyear</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2000</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2002</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2004</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2005</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2006</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2007</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> Int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_fixed1[df_fixed1['geoname' ]== 'Angels city']['reportyear'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "3oa8YaldM_A4",
        "outputId": "8e279d5e-43a3-4c39-b485-7f3d945e346f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "reportyear\n",
              "2010    5\n",
              "2011    5\n",
              "2012    5\n",
              "2013    5\n",
              "Name: count, dtype: Int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reportyear</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> Int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 170
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# it is safe to assume that these are the same since Angel City city stops at 2009 and angel city starts at 2010. We will change Angels city to Angels City city.\n",
        "\n",
        "df_fixed1['geoname'] = df_fixed1['geoname'].convert_dtypes(convert_string = True)\n",
        "\n",
        "df_fixed1['geoname'] = df_fixed1['geoname'].replace('Angels city', 'Angels City city')\n",
        "\n",
        "#change so geotype is the same too\n",
        "df_fixed1['geotypevalue'] = df_fixed1['geotypevalue'].replace(2112.0, 2132.0)"
      ],
      "metadata": {
        "id": "ij3fQSToNFDY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# recalculate totals since we have deleted duplicate rows\n",
        "df_fixed2 = df_fixed1.copy()\n",
        "\n",
        "df_fixed2.sort_values(['reportyear', 'geotype','geoname',  'strata_level_name_code'])\n",
        "\n",
        "df_fixed2 = df_fixed2.groupby(grouping_cols, group_keys=False).apply(calculate_corrected_total)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rit38kUb-9ln",
        "outputId": "1c994463-0f6e-4093-b691-4417b579783f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-172-154411683.py:6: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
            "  df_fixed2 = df_fixed2.groupby(grouping_cols, group_keys=False).apply(calculate_corrected_total)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# No matter what the geotype is, CA, RE, CO, or PL we get the same amount when we compare the sum of all violent crimes to the sum of the total of violent crimes. Now Our data flows consitently.\n",
        "\n",
        "# take the violent crime total value and put it in a variable\n",
        "x = df_fixed2[(df_fixed2['strata_level_name_code'] == 5.0) & (df_fixed2['geotype'] == 'PL')]['numerator']\n",
        "\n",
        "# take the other 4 violent crime values and store them in a series\n",
        "y = df_fixed2[(df_fixed2['strata_level_name_code'] != 5) & (df_fixed2['geotype'] == 'PL')]['numerator']\n",
        "\n",
        "\n",
        "\n",
        "# in theory, the sum of both should be equal to each other.\n",
        "print(x.sum())\n",
        "print(y.sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h2c5PJzB-9hw",
        "outputId": "3febe4c9-ed29-4e1f-c167-f386396b7825"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2174941\n",
            "2174941\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# there were null values we need to address in the denominator column (the population). About 2000.\n",
        "\n",
        "df_fixed2.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3hKhM8dS-9e5",
        "outputId": "2170a030-054b-4f1c-cf13-3e6922c8b100"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 38780 entries, 0 to 49225\n",
            "Data columns (total 24 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   reportyear              38780 non-null  Int64  \n",
            " 1   race_eth_code           38780 non-null  float64\n",
            " 2   race_eth_name           38780 non-null  object \n",
            " 3   geotype                 38780 non-null  object \n",
            " 4   geotypevalue            38780 non-null  float64\n",
            " 5   geoname                 38780 non-null  string \n",
            " 6   county_fips             37730 non-null  float64\n",
            " 7   county_name             37730 non-null  object \n",
            " 8   region_code             38710 non-null  float64\n",
            " 9   region_name             38710 non-null  object \n",
            " 10  strata_name_code        38780 non-null  float64\n",
            " 11  strata_name             38780 non-null  object \n",
            " 12  strata_level_name_code  38780 non-null  float64\n",
            " 13  strata_level_name       38780 non-null  string \n",
            " 14  numerator               38780 non-null  Int64  \n",
            " 15  denominator             36850 non-null  Int64  \n",
            " 16  rate                    7285 non-null   float64\n",
            " 17  ll_95ci                 7285 non-null   float64\n",
            " 18  ul_95ci                 7285 non-null   float64\n",
            " 19  se                      7285 non-null   float64\n",
            " 20  rse                     7285 non-null   float64\n",
            " 21  ca_decile               6263 non-null   float64\n",
            " 22  ca_rr                   7285 non-null   float64\n",
            " 23  dof_population          38290 non-null  float64\n",
            "dtypes: Int64(3), float64(14), object(5), string(2)\n",
            "memory usage: 8.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_fixed2[(df_fixed2['denominator'].isnull()) & df_fixed2['dof_population'].notnull()]['geoname'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "CTj0H7sX-9Yc",
        "outputId": "a991502d-e956-453c-caef-352b0201b080"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "geoname\n",
              "Amador City city          70\n",
              "Colfax city               70\n",
              "Corte Madera town         70\n",
              "San Joaquin city          70\n",
              "Plymouth city             70\n",
              "Maricopa city             70\n",
              "Loyalton city             70\n",
              "Live Oak city             70\n",
              "San Juan Bautista city    70\n",
              "Woodside town             70\n",
              "Wasco city                70\n",
              "Tehama city               70\n",
              "Portola city              70\n",
              "Portola Valley town       70\n",
              "Point Arena city          70\n",
              "Orange Cove city          65\n",
              "Lake Elsinore city        50\n",
              "McFarland city            50\n",
              "Porterville city          50\n",
              "Wildomar city             45\n",
              "Tehachapi city            45\n",
              "Rancho Cordova city       45\n",
              "Menifee city              45\n",
              "Mendota city              45\n",
              "Citrus Heights city       30\n",
              "Elk Grove city            30\n",
              "Blue Lake city            25\n",
              "Trinidad city             25\n",
              "San Carlos city           15\n",
              "Calipatria city           15\n",
              "Half Moon Bay city        15\n",
              "Aliso Viejo city          10\n",
              "Goleta city               10\n",
              "Truckee town              10\n",
              "Millbrae city             10\n",
              "Weed city                 10\n",
              "Holtville city             5\n",
              "Parlier city               5\n",
              "Isleton city               5\n",
              "San Anselmo town           5\n",
              "Name: count, dtype: Int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geoname</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Amador City city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Colfax city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Corte Madera town</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>San Joaquin city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Plymouth city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Maricopa city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Loyalton city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Live Oak city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>San Juan Bautista city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Woodside town</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Wasco city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Tehama city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Portola city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Portola Valley town</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Point Arena city</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Orange Cove city</th>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lake Elsinore city</th>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>McFarland city</th>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Porterville city</th>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Wildomar city</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Tehachapi city</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rancho Cordova city</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Menifee city</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mendota city</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Citrus Heights city</th>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Elk Grove city</th>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Blue Lake city</th>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Trinidad city</th>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>San Carlos city</th>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Calipatria city</th>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Half Moon Bay city</th>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Aliso Viejo city</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Goleta city</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Truckee town</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Millbrae city</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Weed city</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Holtville city</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parlier city</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Isleton city</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>San Anselmo town</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> Int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 175
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# view example of region where denominator is null but we have dof_population data.\n",
        "df_fixed2[df_fixed2['geoname']=='Amador City city']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "id": "DHVfZRMJ-9Uy",
        "outputId": "0a47c4ff-14a6-4240-c1e4-1c93b6105cd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       reportyear  race_eth_code race_eth_name geotype  geotypevalue  \\\n",
              "340          2000            9.0         Total      PL        1514.0   \n",
              "341          2000            9.0         Total      PL        1514.0   \n",
              "342          2000            9.0         Total      PL        1514.0   \n",
              "343          2000            9.0         Total      PL        1514.0   \n",
              "344          2000            9.0         Total      PL        1514.0   \n",
              "...           ...            ...           ...     ...           ...   \n",
              "45755        2013            9.0         Total      PL        1514.0   \n",
              "45756        2013            9.0         Total      PL        1514.0   \n",
              "45757        2013            9.0         Total      PL        1514.0   \n",
              "45758        2013            9.0         Total      PL        1514.0   \n",
              "45759        2013            9.0         Total      PL        1514.0   \n",
              "\n",
              "                geoname  county_fips county_name  region_code  \\\n",
              "340    Amador City city       6005.0      Amador          3.0   \n",
              "341    Amador City city       6005.0      Amador          3.0   \n",
              "342    Amador City city       6005.0      Amador          3.0   \n",
              "343    Amador City city       6005.0      Amador          3.0   \n",
              "344    Amador City city       6005.0      Amador          3.0   \n",
              "...                 ...          ...         ...          ...   \n",
              "45755  Amador City city       6005.0      Amador          3.0   \n",
              "45756  Amador City city       6005.0      Amador          3.0   \n",
              "45757  Amador City city       6005.0      Amador          3.0   \n",
              "45758  Amador City city       6005.0      Amador          3.0   \n",
              "45759  Amador City city       6005.0      Amador          3.0   \n",
              "\n",
              "                    region_name  strata_name_code            strata_name  \\\n",
              "340    Central/Southeast Sierra               1.0  Type of violent crime   \n",
              "341    Central/Southeast Sierra               1.0  Type of violent crime   \n",
              "342    Central/Southeast Sierra               1.0  Type of violent crime   \n",
              "343    Central/Southeast Sierra               1.0  Type of violent crime   \n",
              "344    Central/Southeast Sierra               1.0  Type of violent crime   \n",
              "...                         ...               ...                    ...   \n",
              "45755  Central/Southeast Sierra               1.0  Type of violent crime   \n",
              "45756  Central/Southeast Sierra               1.0  Type of violent crime   \n",
              "45757  Central/Southeast Sierra               1.0  Type of violent crime   \n",
              "45758  Central/Southeast Sierra               1.0  Type of violent crime   \n",
              "45759  Central/Southeast Sierra               1.0  Type of violent crime   \n",
              "\n",
              "       strata_level_name_code                      strata_level_name  \\\n",
              "340                       1.0                     Aggravated assault   \n",
              "341                       2.0                          Sexual assult   \n",
              "342                       3.0  Murder and non-negligent manslaughter   \n",
              "343                       4.0                                Robbery   \n",
              "344                       5.0                    Violent crime total   \n",
              "...                       ...                                    ...   \n",
              "45755                     1.0                     Aggravated assault   \n",
              "45756                     2.0                          Sexual assult   \n",
              "45757                     3.0  Murder and non-negligent manslaughter   \n",
              "45758                     4.0                                Robbery   \n",
              "45759                     5.0                    Violent crime total   \n",
              "\n",
              "       numerator  denominator  rate  ll_95ci  ul_95ci  se  rse  ca_decile  \\\n",
              "340            0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "341            0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "342            0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "343            0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "344            0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "...          ...          ...   ...      ...      ...  ..  ...        ...   \n",
              "45755          0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "45756          0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "45757          0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "45758          0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "45759          0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "\n",
              "       ca_rr  dof_population  \n",
              "340      NaN           196.0  \n",
              "341      NaN           196.0  \n",
              "342      NaN           196.0  \n",
              "343      NaN           196.0  \n",
              "344      NaN           196.0  \n",
              "...      ...             ...  \n",
              "45755    NaN           180.0  \n",
              "45756    NaN           180.0  \n",
              "45757    NaN           180.0  \n",
              "45758    NaN           180.0  \n",
              "45759    NaN           180.0  \n",
              "\n",
              "[70 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-622ddb6e-4242-4535-9c4a-211cd72aacbd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>340</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>1514.0</td>\n",
              "      <td>Amador City city</td>\n",
              "      <td>6005.0</td>\n",
              "      <td>Amador</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>196.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>341</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>1514.0</td>\n",
              "      <td>Amador City city</td>\n",
              "      <td>6005.0</td>\n",
              "      <td>Amador</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>196.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>342</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>1514.0</td>\n",
              "      <td>Amador City city</td>\n",
              "      <td>6005.0</td>\n",
              "      <td>Amador</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>196.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>1514.0</td>\n",
              "      <td>Amador City city</td>\n",
              "      <td>6005.0</td>\n",
              "      <td>Amador</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>196.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>344</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>1514.0</td>\n",
              "      <td>Amador City city</td>\n",
              "      <td>6005.0</td>\n",
              "      <td>Amador</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>196.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45755</th>\n",
              "      <td>2013</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>1514.0</td>\n",
              "      <td>Amador City city</td>\n",
              "      <td>6005.0</td>\n",
              "      <td>Amador</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>180.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45756</th>\n",
              "      <td>2013</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>1514.0</td>\n",
              "      <td>Amador City city</td>\n",
              "      <td>6005.0</td>\n",
              "      <td>Amador</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>180.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45757</th>\n",
              "      <td>2013</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>1514.0</td>\n",
              "      <td>Amador City city</td>\n",
              "      <td>6005.0</td>\n",
              "      <td>Amador</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>180.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45758</th>\n",
              "      <td>2013</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>1514.0</td>\n",
              "      <td>Amador City city</td>\n",
              "      <td>6005.0</td>\n",
              "      <td>Amador</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>180.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45759</th>\n",
              "      <td>2013</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>1514.0</td>\n",
              "      <td>Amador City city</td>\n",
              "      <td>6005.0</td>\n",
              "      <td>Amador</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Central/Southeast Sierra</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>180.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>70 rows × 24 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-622ddb6e-4242-4535-9c4a-211cd72aacbd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-622ddb6e-4242-4535-9c4a-211cd72aacbd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-622ddb6e-4242-4535-9c4a-211cd72aacbd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c9571b6b-edfd-4c18-a746-3dc14879f2bb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c9571b6b-edfd-4c18-a746-3dc14879f2bb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c9571b6b-edfd-4c18-a746-3dc14879f2bb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 176
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# fill null values in denominator column with population data in dof population column\n",
        "\n",
        "df_fixed2['denominator'] = df_fixed2['denominator'].fillna(df_fixed2['dof_population'])"
      ],
      "metadata": {
        "id": "xAd_1slr-9RZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# view places where we can not see any population data.\n",
        "\n",
        "df_fixed2[(df_fixed2['denominator'].isnull()) & df_fixed2['dof_population'].isnull()]['geoname'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "KcRw2yWi-9bw",
        "outputId": "f4d90961-9f09-4ac3-c69e-c287b0cfba72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "geoname\n",
              "Cabazon CDP                70\n",
              "Emerald Lake Hills CDP     70\n",
              "Klamath CDP                70\n",
              "Bear Valley Springs CDP     5\n",
              "Name: count, dtype: Int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geoname</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Cabazon CDP</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Emerald Lake Hills CDP</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Klamath CDP</th>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bear Valley Springs CDP</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> Int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 178
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# now we must address the locations with no population at data all.\n",
        "# lets see if any of them have reported crimes (values in numerator column)\n",
        "\n",
        "df_fixed2[(df_fixed2['denominator'].isnull()) & df_fixed2['dof_population'].isnull()]['numerator'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZX6t_xhg-9Ox",
        "outputId": "0a954e44-a390-4517-d0d8-b4a861894ca5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IntegerArray>\n",
              "[0]\n",
              "Length: 1, dtype: Int64"
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# all these have no numerator/no reported crime, so we can drop these\n",
        "\n",
        "df_fixed2[(df_fixed2['denominator'].isnull()) & df_fixed2['dof_population'].isnull()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 808
        },
        "id": "sOtwSN4f-9Kf",
        "outputId": "9dc66fb8-4408-49c3-cdab-acd05711b392"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       reportyear  race_eth_code race_eth_name geotype  geotypevalue  \\\n",
              "475          2000            9.0         Total      PL        4734.0   \n",
              "476          2000            9.0         Total      PL        4734.0   \n",
              "477          2000            9.0         Total      PL        4734.0   \n",
              "478          2000            9.0         Total      PL        4734.0   \n",
              "479          2000            9.0         Total      PL        4734.0   \n",
              "...           ...            ...           ...     ...           ...   \n",
              "47186        2013            9.0         Total      PL       38702.0   \n",
              "47187        2013            9.0         Total      PL       38702.0   \n",
              "47188        2013            9.0         Total      PL       38702.0   \n",
              "47189        2013            9.0         Total      PL       38702.0   \n",
              "47190        2013            9.0         Total      PL       38702.0   \n",
              "\n",
              "                       geoname  county_fips county_name  region_code  \\\n",
              "475    Bear Valley Springs CDP       6029.0        Kern         10.0   \n",
              "476    Bear Valley Springs CDP       6029.0        Kern         10.0   \n",
              "477    Bear Valley Springs CDP       6029.0        Kern         10.0   \n",
              "478    Bear Valley Springs CDP       6029.0        Kern         10.0   \n",
              "479    Bear Valley Springs CDP       6029.0        Kern         10.0   \n",
              "...                        ...          ...         ...          ...   \n",
              "47186              Klamath CDP       6015.0   Del Norte          5.0   \n",
              "47187              Klamath CDP       6015.0   Del Norte          5.0   \n",
              "47188              Klamath CDP       6015.0   Del Norte          5.0   \n",
              "47189              Klamath CDP       6015.0   Del Norte          5.0   \n",
              "47190              Klamath CDP       6015.0   Del Norte          5.0   \n",
              "\n",
              "              region_name  strata_name_code            strata_name  \\\n",
              "475    San Joaquin Valley               1.0  Type of violent crime   \n",
              "476    San Joaquin Valley               1.0  Type of violent crime   \n",
              "477    San Joaquin Valley               1.0  Type of violent crime   \n",
              "478    San Joaquin Valley               1.0  Type of violent crime   \n",
              "479    San Joaquin Valley               1.0  Type of violent crime   \n",
              "...                   ...               ...                    ...   \n",
              "47186         North Coast               1.0  Type of violent crime   \n",
              "47187         North Coast               1.0  Type of violent crime   \n",
              "47188         North Coast               1.0  Type of violent crime   \n",
              "47189         North Coast               1.0  Type of violent crime   \n",
              "47190         North Coast               1.0  Type of violent crime   \n",
              "\n",
              "       strata_level_name_code                      strata_level_name  \\\n",
              "475                       1.0                     Aggravated assault   \n",
              "476                       2.0                          Sexual assult   \n",
              "477                       3.0  Murder and non-negligent manslaughter   \n",
              "478                       4.0                                Robbery   \n",
              "479                       5.0                    Violent crime total   \n",
              "...                       ...                                    ...   \n",
              "47186                     1.0                     Aggravated assault   \n",
              "47187                     2.0                          Sexual assult   \n",
              "47188                     3.0  Murder and non-negligent manslaughter   \n",
              "47189                     4.0                                Robbery   \n",
              "47190                     5.0                    Violent crime total   \n",
              "\n",
              "       numerator  denominator  rate  ll_95ci  ul_95ci  se  rse  ca_decile  \\\n",
              "475            0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "476            0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "477            0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "478            0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "479            0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "...          ...          ...   ...      ...      ...  ..  ...        ...   \n",
              "47186          0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "47187          0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "47188          0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "47189          0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "47190          0         <NA>   NaN      NaN      NaN NaN  NaN        NaN   \n",
              "\n",
              "       ca_rr  dof_population  \n",
              "475      NaN             NaN  \n",
              "476      NaN             NaN  \n",
              "477      NaN             NaN  \n",
              "478      NaN             NaN  \n",
              "479      NaN             NaN  \n",
              "...      ...             ...  \n",
              "47186    NaN             NaN  \n",
              "47187    NaN             NaN  \n",
              "47188    NaN             NaN  \n",
              "47189    NaN             NaN  \n",
              "47190    NaN             NaN  \n",
              "\n",
              "[215 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-43679432-6396-4d3a-ae79-bf38a4cad03e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>race_eth_code</th>\n",
              "      <th>race_eth_name</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_name_code</th>\n",
              "      <th>strata_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "      <th>ca_decile</th>\n",
              "      <th>ca_rr</th>\n",
              "      <th>dof_population</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>475</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>4734.0</td>\n",
              "      <td>Bear Valley Springs CDP</td>\n",
              "      <td>6029.0</td>\n",
              "      <td>Kern</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>476</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>4734.0</td>\n",
              "      <td>Bear Valley Springs CDP</td>\n",
              "      <td>6029.0</td>\n",
              "      <td>Kern</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>477</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>4734.0</td>\n",
              "      <td>Bear Valley Springs CDP</td>\n",
              "      <td>6029.0</td>\n",
              "      <td>Kern</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>478</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>4734.0</td>\n",
              "      <td>Bear Valley Springs CDP</td>\n",
              "      <td>6029.0</td>\n",
              "      <td>Kern</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>479</th>\n",
              "      <td>2000</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>4734.0</td>\n",
              "      <td>Bear Valley Springs CDP</td>\n",
              "      <td>6029.0</td>\n",
              "      <td>Kern</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47186</th>\n",
              "      <td>2013</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>38702.0</td>\n",
              "      <td>Klamath CDP</td>\n",
              "      <td>6015.0</td>\n",
              "      <td>Del Norte</td>\n",
              "      <td>5.0</td>\n",
              "      <td>North Coast</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47187</th>\n",
              "      <td>2013</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>38702.0</td>\n",
              "      <td>Klamath CDP</td>\n",
              "      <td>6015.0</td>\n",
              "      <td>Del Norte</td>\n",
              "      <td>5.0</td>\n",
              "      <td>North Coast</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47188</th>\n",
              "      <td>2013</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>38702.0</td>\n",
              "      <td>Klamath CDP</td>\n",
              "      <td>6015.0</td>\n",
              "      <td>Del Norte</td>\n",
              "      <td>5.0</td>\n",
              "      <td>North Coast</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47189</th>\n",
              "      <td>2013</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>38702.0</td>\n",
              "      <td>Klamath CDP</td>\n",
              "      <td>6015.0</td>\n",
              "      <td>Del Norte</td>\n",
              "      <td>5.0</td>\n",
              "      <td>North Coast</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47190</th>\n",
              "      <td>2013</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Total</td>\n",
              "      <td>PL</td>\n",
              "      <td>38702.0</td>\n",
              "      <td>Klamath CDP</td>\n",
              "      <td>6015.0</td>\n",
              "      <td>Del Norte</td>\n",
              "      <td>5.0</td>\n",
              "      <td>North Coast</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Type of violent crime</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>0</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>215 rows × 24 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43679432-6396-4d3a-ae79-bf38a4cad03e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-43679432-6396-4d3a-ae79-bf38a4cad03e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-43679432-6396-4d3a-ae79-bf38a4cad03e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2a0878d3-e523-4372-a1e1-68d9b89eb911\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2a0878d3-e523-4372-a1e1-68d9b89eb911')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2a0878d3-e523-4372-a1e1-68d9b89eb911 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = df_fixed2[(df_fixed2['denominator'].isnull()) & df_fixed2['dof_population'].isnull()].index\n",
        "\n",
        "len(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BKdcpY-o-9GQ",
        "outputId": "292beab0-e215-4ad3-cb81-ae41070eff78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "215"
            ]
          },
          "metadata": {},
          "execution_count": 181
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_fixed2.drop(index=x, inplace = True)\n",
        "df_fixed2[(df_fixed2['denominator'].isnull()) & df_fixed2['dof_population'].isnull()]['geoname'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "pO0Nrmnt-889",
        "outputId": "121d3afe-49a5-4985-ed69-ab1f812c49c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Series([], Name: count, dtype: Int64)"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>geoname</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> Int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 182
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df_fixed2.copy()"
      ],
      "metadata": {
        "id": "qZlggXA6TBfa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "For the final step for cleaning we will clean up the nulls in rate, ll_95ci, ul_95ci, etc"
      ],
      "metadata": {
        "id": "tBQf5lkXOn6h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# populate the rate which is numerator/denominator (crime/population)\n",
        "\n",
        "df['rate'] = df['numerator'] / df['denominator']"
      ],
      "metadata": {
        "id": "XIV3exu-X4WB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# we wil use the wilson meathod to deterimine the lower level and uper level confidence intervals.\n",
        "\n",
        "from statsmodels.stats.proportion import proportion_confint\n",
        "\n",
        "df['ll_95ci'] = proportion_confint(count=df['numerator'], nobs=df['denominator'], alpha=0.05,method='wilson')[0]"
      ],
      "metadata": {
        "id": "zZe5NVyIVA1K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af0b4a7c-153f-41fa-9ad2-7f7a60401569"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/statsmodels/stats/proportion.py:190: RuntimeWarning: invalid value encountered in divide\n",
            "  q_ = count_a / nobs_a\n",
            "/usr/local/lib/python3.11/dist-packages/statsmodels/stats/proportion.py:282: RuntimeWarning: divide by zero encountered in divide\n",
            "  denom = 1 + crit2 / nobs_a\n",
            "/usr/local/lib/python3.11/dist-packages/statsmodels/stats/proportion.py:283: RuntimeWarning: divide by zero encountered in divide\n",
            "  center = (q_ + crit2 / (2 * nobs_a)) / denom\n",
            "/usr/local/lib/python3.11/dist-packages/statsmodels/stats/proportion.py:285: RuntimeWarning: divide by zero encountered in divide\n",
            "  q_ * (1.0 - q_) / nobs_a + crit2 / (4.0 * nobs_a**2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['ul_95ci'] = proportion_confint(count=df['numerator'], nobs=df['denominator'], alpha=0.05,method='wilson')[1]"
      ],
      "metadata": {
        "id": "nI_XZW4YmmfF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "246c168e-190b-4fcb-8972-e733e25c16a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/statsmodels/stats/proportion.py:190: RuntimeWarning: invalid value encountered in divide\n",
            "  q_ = count_a / nobs_a\n",
            "/usr/local/lib/python3.11/dist-packages/statsmodels/stats/proportion.py:282: RuntimeWarning: divide by zero encountered in divide\n",
            "  denom = 1 + crit2 / nobs_a\n",
            "/usr/local/lib/python3.11/dist-packages/statsmodels/stats/proportion.py:283: RuntimeWarning: divide by zero encountered in divide\n",
            "  center = (q_ + crit2 / (2 * nobs_a)) / denom\n",
            "/usr/local/lib/python3.11/dist-packages/statsmodels/stats/proportion.py:285: RuntimeWarning: divide by zero encountered in divide\n",
            "  q_ * (1.0 - q_) / nobs_a + crit2 / (4.0 * nobs_a**2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# next we will find the standard error\n",
        "\n",
        "df['se'] = ((df['rate']*(1 - df['rate'])) / (df['denominator']))**0.5"
      ],
      "metadata": {
        "id": "sP95UmdMrSJF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Now we will find the RSE\n",
        "\n",
        "df['rse'] = (df['se'] / df['rate']) * 100"
      ],
      "metadata": {
        "id": "ztPjkO5jx1sM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Since we are looking at our data through the lens of crimes per 1000, we will multiply appropriate columns by 1000\n",
        "\n",
        "df['rate'] = df['rate'] * 1000\n",
        "df['ll_95ci'] = df['ll_95ci'] * 1000\n",
        "df['ul_95ci'] = df['ul_95ci'] * 1000\n",
        "df['se'] = df['se'] * 1000\n"
      ],
      "metadata": {
        "id": "V0GUNZqgw3a7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Finally we will drop some columns that dont have use for us\n",
        "df.drop(columns=['race_eth_code', 'race_eth_name', 'strata_name','strata_name_code','ca_decile','ca_rr','dof_population'], inplace = True)"
      ],
      "metadata": {
        "id": "RG64Kep619UY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Finally, we are ready to start analyzing!"
      ],
      "metadata": {
        "id": "zRzGkxsj4UH1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Analysis"
      ],
      "metadata": {
        "id": "3pOwQ1TA4YCl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "First lets look at state level statistics"
      ],
      "metadata": {
        "id": "H0GiFOqcc3Up"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_total_only = df[(df['strata_level_name_code'] == 5) & (df['geoname'] == 'California') & df['county_fips'].isnull()]\n",
        "df_total_only.head(len(df['reportyear']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "-k0IfkKeeIMn",
        "outputId": "872558af-4700-4bbd-c15e-cea493a68c28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       reportyear geotype  geotypevalue     geoname  county_fips county_name  \\\n",
              "4            2000      CA           6.0  California          NaN         NaN   \n",
              "3395         2001      CA           6.0  California          NaN         NaN   \n",
              "6786         2002      CA           6.0  California          NaN         NaN   \n",
              "10177        2003      CA           6.0  California          NaN         NaN   \n",
              "13568        2004      CA           6.0  California          NaN         NaN   \n",
              "16959        2005      CA           6.0  California          NaN         NaN   \n",
              "20350        2006      CA           6.0  California          NaN         NaN   \n",
              "23741        2007      CA           6.0  California          NaN         NaN   \n",
              "27132        2008      CA           6.0  California          NaN         NaN   \n",
              "30523        2009      CA           6.0  California          NaN         NaN   \n",
              "33914        2010      CA           6.0  California          NaN         NaN   \n",
              "37746        2011      CA           6.0  California          NaN         NaN   \n",
              "41578        2012      CA           6.0  California          NaN         NaN   \n",
              "45404        2013      CA           6.0  California          NaN         NaN   \n",
              "\n",
              "       region_code region_name  strata_level_name_code    strata_level_name  \\\n",
              "4              NaN         NaN                     5.0  Violent crime total   \n",
              "3395           NaN         NaN                     5.0  Violent crime total   \n",
              "6786           NaN         NaN                     5.0  Violent crime total   \n",
              "10177          NaN         NaN                     5.0  Violent crime total   \n",
              "13568          NaN         NaN                     5.0  Violent crime total   \n",
              "16959          NaN         NaN                     5.0  Violent crime total   \n",
              "20350          NaN         NaN                     5.0  Violent crime total   \n",
              "23741          NaN         NaN                     5.0  Violent crime total   \n",
              "27132          NaN         NaN                     5.0  Violent crime total   \n",
              "30523          NaN         NaN                     5.0  Violent crime total   \n",
              "33914          NaN         NaN                     5.0  Violent crime total   \n",
              "37746          NaN         NaN                     5.0  Violent crime total   \n",
              "41578          NaN         NaN                     5.0  Violent crime total   \n",
              "45404          NaN         NaN                     5.0  Violent crime total   \n",
              "\n",
              "       numerator  denominator      rate   ll_95ci   ul_95ci        se  \\\n",
              "4         210425     33847694  6.216819  6.190396  6.243355   0.01351   \n",
              "3395      212820     34479624  6.172341  6.146254  6.198539  0.013338   \n",
              "6786      208128     35094142  5.930562  5.905213  5.956020  0.012961   \n",
              "10177     204575     35462993   5.76869  5.743818  5.793669  0.012717   \n",
              "13568     197389     35872516  5.502513  5.478359  5.526774  0.012351   \n",
              "16959     190149     36111034  5.265676  5.242123  5.289334  0.012044   \n",
              "20350     194399     36436517  5.335279  5.311678  5.358985  0.012068   \n",
              "23741     191451     36532165  5.240615  5.217253  5.264080  0.011946   \n",
              "27132     185141     36735742  5.039806  5.016959  5.062756  0.011683   \n",
              "30523     174536     36940746  4.724756  4.702694  4.746921  0.011283   \n",
              "33914     163930     37232777  4.402841  4.381626  4.424159   0.01085   \n",
              "37746     154595     37645587   4.10659  4.086212  4.127069  0.010423   \n",
              "41578     160572     38000252  4.225551  4.204977  4.246225  0.010523   \n",
              "45404     151593     38290355  3.959039  3.939198  3.978979  0.010148   \n",
              "\n",
              "            rse  \n",
              "4      0.217319  \n",
              "3395   0.216097  \n",
              "6786   0.218546  \n",
              "10177  0.220454  \n",
              "13568  0.224461  \n",
              "16959  0.228721  \n",
              "20350  0.226199  \n",
              "23741  0.227945  \n",
              "27132   0.23182  \n",
              "30523  0.238797  \n",
              "33914  0.246441  \n",
              "37746   0.25381  \n",
              "41578  0.249027  \n",
              "45404   0.25633  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-39b68125-aae8-4fd9-af1c-dc932d77042b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2000</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>210425</td>\n",
              "      <td>33847694</td>\n",
              "      <td>6.216819</td>\n",
              "      <td>6.190396</td>\n",
              "      <td>6.243355</td>\n",
              "      <td>0.01351</td>\n",
              "      <td>0.217319</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3395</th>\n",
              "      <td>2001</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>212820</td>\n",
              "      <td>34479624</td>\n",
              "      <td>6.172341</td>\n",
              "      <td>6.146254</td>\n",
              "      <td>6.198539</td>\n",
              "      <td>0.013338</td>\n",
              "      <td>0.216097</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6786</th>\n",
              "      <td>2002</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>208128</td>\n",
              "      <td>35094142</td>\n",
              "      <td>5.930562</td>\n",
              "      <td>5.905213</td>\n",
              "      <td>5.956020</td>\n",
              "      <td>0.012961</td>\n",
              "      <td>0.218546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10177</th>\n",
              "      <td>2003</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>204575</td>\n",
              "      <td>35462993</td>\n",
              "      <td>5.76869</td>\n",
              "      <td>5.743818</td>\n",
              "      <td>5.793669</td>\n",
              "      <td>0.012717</td>\n",
              "      <td>0.220454</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13568</th>\n",
              "      <td>2004</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>197389</td>\n",
              "      <td>35872516</td>\n",
              "      <td>5.502513</td>\n",
              "      <td>5.478359</td>\n",
              "      <td>5.526774</td>\n",
              "      <td>0.012351</td>\n",
              "      <td>0.224461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16959</th>\n",
              "      <td>2005</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>190149</td>\n",
              "      <td>36111034</td>\n",
              "      <td>5.265676</td>\n",
              "      <td>5.242123</td>\n",
              "      <td>5.289334</td>\n",
              "      <td>0.012044</td>\n",
              "      <td>0.228721</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20350</th>\n",
              "      <td>2006</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>194399</td>\n",
              "      <td>36436517</td>\n",
              "      <td>5.335279</td>\n",
              "      <td>5.311678</td>\n",
              "      <td>5.358985</td>\n",
              "      <td>0.012068</td>\n",
              "      <td>0.226199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23741</th>\n",
              "      <td>2007</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>191451</td>\n",
              "      <td>36532165</td>\n",
              "      <td>5.240615</td>\n",
              "      <td>5.217253</td>\n",
              "      <td>5.264080</td>\n",
              "      <td>0.011946</td>\n",
              "      <td>0.227945</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27132</th>\n",
              "      <td>2008</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>185141</td>\n",
              "      <td>36735742</td>\n",
              "      <td>5.039806</td>\n",
              "      <td>5.016959</td>\n",
              "      <td>5.062756</td>\n",
              "      <td>0.011683</td>\n",
              "      <td>0.23182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30523</th>\n",
              "      <td>2009</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>174536</td>\n",
              "      <td>36940746</td>\n",
              "      <td>4.724756</td>\n",
              "      <td>4.702694</td>\n",
              "      <td>4.746921</td>\n",
              "      <td>0.011283</td>\n",
              "      <td>0.238797</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33914</th>\n",
              "      <td>2010</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>163930</td>\n",
              "      <td>37232777</td>\n",
              "      <td>4.402841</td>\n",
              "      <td>4.381626</td>\n",
              "      <td>4.424159</td>\n",
              "      <td>0.01085</td>\n",
              "      <td>0.246441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37746</th>\n",
              "      <td>2011</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>154595</td>\n",
              "      <td>37645587</td>\n",
              "      <td>4.10659</td>\n",
              "      <td>4.086212</td>\n",
              "      <td>4.127069</td>\n",
              "      <td>0.010423</td>\n",
              "      <td>0.25381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41578</th>\n",
              "      <td>2012</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>160572</td>\n",
              "      <td>38000252</td>\n",
              "      <td>4.225551</td>\n",
              "      <td>4.204977</td>\n",
              "      <td>4.246225</td>\n",
              "      <td>0.010523</td>\n",
              "      <td>0.249027</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45404</th>\n",
              "      <td>2013</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>151593</td>\n",
              "      <td>38290355</td>\n",
              "      <td>3.959039</td>\n",
              "      <td>3.939198</td>\n",
              "      <td>3.978979</td>\n",
              "      <td>0.010148</td>\n",
              "      <td>0.25633</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39b68125-aae8-4fd9-af1c-dc932d77042b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-39b68125-aae8-4fd9-af1c-dc932d77042b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-39b68125-aae8-4fd9-af1c-dc932d77042b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8e32a8da-1b26-47c1-bc2d-485e6a03f640\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8e32a8da-1b26-47c1-bc2d-485e6a03f640')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8e32a8da-1b26-47c1-bc2d-485e6a03f640 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_total_only",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 191
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot(df_total_only['reportyear'],df_total_only['rate'])\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Crime rate per 1000')\n",
        "plt.title('California Crime Rate per 1000 from 2000-2013')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "BBNoeHFowzy8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "ffd108f0-7a3b-4cc0-da69-45c8d7b8b801"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# View the year over year change of the crime rate for california from 2000 to 2013.\n",
        "\n",
        "df_total_only['YoY_change'] = df_total_only['rate'].pct_change()\n",
        "\n",
        "plt.plot(df_total_only['reportyear'],df_total_only['YoY_change'], label='violent crimes', color = 'green')\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Rate in %')\n",
        "plt.title('California Violent Crime Rate YoY Change in %')\n",
        "\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 579
        },
        "id": "dtFVEMwNWh8O",
        "outputId": "849d2914-8dbd-4251-c6dc-33f9914c1f84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-193-3556948274.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_total_only['YoY_change'] = df_total_only['rate'].pct_change()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# overall we are seeing the rate of violent crime decrease in the state of California over time. Lets see how crime and population changed over time to see if that provides any insight\n",
        "\n",
        "figure = plt.figure(figsize=(10,10))\n",
        "\n",
        "plt.subplot(2,1,1)\n",
        "plt.plot(df_total_only['reportyear'],df_total_only['numerator'], label='violent crimes', color = 'orange')\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Number of Crimes')\n",
        "plt.title('California Violent Crime from 2000-2013')\n",
        "plt.legend()\n",
        "\n",
        "\n",
        "plt.subplot(2,1,2)\n",
        "plt.plot(df_total_only['reportyear'],df_total_only['denominator'], label='state population', color = 'black')\n",
        "\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Population (in 10 million)')\n",
        "plt.title('California State Population from 2000-2013')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 872
        },
        "id": "NqnMbiy8kMCG",
        "outputId": "214515f8-1720-4729-b7f8-5fe4dcf9f15a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Not only did the number of violent crimes per year reduce, California's population per year increased as well. Effectively making the violent crime rate per 1000 lower. Perhaps there was legislation passed around the year of 2001 as that is when the decrease of violent crime starts to occur."
      ],
      "metadata": {
        "id": "irPXcfVdmzri"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Now look at each crime type over the years. First make a df that exludes the totals\n",
        "df_no_total = df[(df['strata_level_name_code'] != 5) & (df['geoname'] == 'California') & df['county_fips'].isnull()]\n",
        "df_no_total.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "b0lrgJFtnZQY",
        "outputId": "9a3f56ae-84a0-4edf-b7d2-22abb528ef5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      reportyear geotype  geotypevalue     geoname  county_fips county_name  \\\n",
              "0           2000      CA           6.0  California          NaN         NaN   \n",
              "1           2000      CA           6.0  California          NaN         NaN   \n",
              "2           2000      CA           6.0  California          NaN         NaN   \n",
              "3           2000      CA           6.0  California          NaN         NaN   \n",
              "3391        2001      CA           6.0  California          NaN         NaN   \n",
              "\n",
              "      region_code region_name  strata_level_name_code  \\\n",
              "0             NaN         NaN                     1.0   \n",
              "1             NaN         NaN                     2.0   \n",
              "2             NaN         NaN                     3.0   \n",
              "3             NaN         NaN                     4.0   \n",
              "3391          NaN         NaN                     1.0   \n",
              "\n",
              "                          strata_level_name  numerator  denominator      rate  \\\n",
              "0                        Aggravated assault     138325     33847694  4.086689   \n",
              "1                             Sexual assult       9784     33847694   0.28906   \n",
              "2     Murder and non-negligent manslaughter       2079     33847694  0.061422   \n",
              "3                                   Robbery      60237     33847694  1.779649   \n",
              "3391                     Aggravated assault     136054     34479624  3.945925   \n",
              "\n",
              "       ll_95ci   ul_95ci        se       rse  \n",
              "0     4.065253  4.108238  0.010966  0.268325  \n",
              "1     0.283389  0.294843  0.002922  1.010832  \n",
              "2     0.058838  0.064120  0.001347  2.193105  \n",
              "3     1.765506  1.793904  0.007245  0.407082  \n",
              "3391  3.925054  3.966906  0.010677  0.270574  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89862528-c349-4af6-911e-034b813492ea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>138325</td>\n",
              "      <td>33847694</td>\n",
              "      <td>4.086689</td>\n",
              "      <td>4.065253</td>\n",
              "      <td>4.108238</td>\n",
              "      <td>0.010966</td>\n",
              "      <td>0.268325</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2000</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>9784</td>\n",
              "      <td>33847694</td>\n",
              "      <td>0.28906</td>\n",
              "      <td>0.283389</td>\n",
              "      <td>0.294843</td>\n",
              "      <td>0.002922</td>\n",
              "      <td>1.010832</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2000</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>2079</td>\n",
              "      <td>33847694</td>\n",
              "      <td>0.061422</td>\n",
              "      <td>0.058838</td>\n",
              "      <td>0.064120</td>\n",
              "      <td>0.001347</td>\n",
              "      <td>2.193105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2000</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>60237</td>\n",
              "      <td>33847694</td>\n",
              "      <td>1.779649</td>\n",
              "      <td>1.765506</td>\n",
              "      <td>1.793904</td>\n",
              "      <td>0.007245</td>\n",
              "      <td>0.407082</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3391</th>\n",
              "      <td>2001</td>\n",
              "      <td>CA</td>\n",
              "      <td>6.0</td>\n",
              "      <td>California</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>136054</td>\n",
              "      <td>34479624</td>\n",
              "      <td>3.945925</td>\n",
              "      <td>3.925054</td>\n",
              "      <td>3.966906</td>\n",
              "      <td>0.010677</td>\n",
              "      <td>0.270574</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89862528-c349-4af6-911e-034b813492ea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-89862528-c349-4af6-911e-034b813492ea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-89862528-c349-4af6-911e-034b813492ea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fef5f93d-cbb1-4f7b-b1a7-2d9debca02a2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fef5f93d-cbb1-4f7b-b1a7-2d9debca02a2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fef5f93d-cbb1-4f7b-b1a7-2d9debca02a2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_no_total",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plot the rate of each crime in the state between 2000-2013\n",
        "\n",
        "for name,group in df_no_total.groupby('strata_level_name'):\n",
        "    plt.plot(group['reportyear'], group['rate'], label=name)\n",
        "plt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "nAG-xI_Xr2iZ",
        "outputId": "4c7804da-eff3-4b09-b7ce-cffadd6510cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Aggrevated assault and robery decreased over time while others remained relatively the same at a low rate. Interestingly enough robberies increased from 2005-20006 and remained at a similar rate until 2008 where it began to drop again. The great recession was from 2007 - 2009 and our data shows crime generally fell during the great recession."
      ],
      "metadata": {
        "id": "Cho75jkLI9rU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Lets view some of the regions with the highest crime rates\n",
        "\n",
        "df_region = df[df['geotype']== 'RE']\n",
        "\n",
        "df_region.head()"
      ],
      "metadata": {
        "id": "selNzcE2tkZd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "outputId": "0c06c888-be00-4b5c-d685-88c7dcf066c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      reportyear geotype  geotypevalue   geoname  county_fips county_name  \\\n",
              "3321        2000      RE           1.0  Bay Area          NaN         NaN   \n",
              "3322        2000      RE           1.0  Bay Area          NaN         NaN   \n",
              "3323        2000      RE           1.0  Bay Area          NaN         NaN   \n",
              "3324        2000      RE           1.0  Bay Area          NaN         NaN   \n",
              "3325        2000      RE           1.0  Bay Area          NaN         NaN   \n",
              "\n",
              "      region_code region_name  strata_level_name_code  \\\n",
              "3321          1.0    Bay Area                     1.0   \n",
              "3322          1.0    Bay Area                     2.0   \n",
              "3323          1.0    Bay Area                     3.0   \n",
              "3324          1.0    Bay Area                     4.0   \n",
              "3325          1.0    Bay Area                     5.0   \n",
              "\n",
              "                          strata_level_name  numerator  denominator      rate  \\\n",
              "3321                     Aggravated assault      21362      6762646  3.158823   \n",
              "3322                          Sexual assult       2046      6762646  0.302544   \n",
              "3323  Murder and non-negligent manslaughter        309      6762646  0.045692   \n",
              "3324                                Robbery      10910      6762646  1.613274   \n",
              "3325                    Violent crime total      34627      6762646  5.120333   \n",
              "\n",
              "       ll_95ci   ul_95ci        se       rse  \n",
              "3321  3.116811  3.201399  0.021578  0.683112  \n",
              "3322  0.289718  0.315939  0.006688  2.210454  \n",
              "3323  0.040874  0.051079  0.002599  5.688671  \n",
              "3324  1.583308  1.643806  0.015433  0.956615  \n",
              "3325  5.066821  5.174408  0.027446  0.536016  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2dea6986-9b4f-4f4e-a523-88435e18bdcb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3321</th>\n",
              "      <td>2000</td>\n",
              "      <td>RE</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>21362</td>\n",
              "      <td>6762646</td>\n",
              "      <td>3.158823</td>\n",
              "      <td>3.116811</td>\n",
              "      <td>3.201399</td>\n",
              "      <td>0.021578</td>\n",
              "      <td>0.683112</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3322</th>\n",
              "      <td>2000</td>\n",
              "      <td>RE</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>2046</td>\n",
              "      <td>6762646</td>\n",
              "      <td>0.302544</td>\n",
              "      <td>0.289718</td>\n",
              "      <td>0.315939</td>\n",
              "      <td>0.006688</td>\n",
              "      <td>2.210454</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3323</th>\n",
              "      <td>2000</td>\n",
              "      <td>RE</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>309</td>\n",
              "      <td>6762646</td>\n",
              "      <td>0.045692</td>\n",
              "      <td>0.040874</td>\n",
              "      <td>0.051079</td>\n",
              "      <td>0.002599</td>\n",
              "      <td>5.688671</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3324</th>\n",
              "      <td>2000</td>\n",
              "      <td>RE</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>10910</td>\n",
              "      <td>6762646</td>\n",
              "      <td>1.613274</td>\n",
              "      <td>1.583308</td>\n",
              "      <td>1.643806</td>\n",
              "      <td>0.015433</td>\n",
              "      <td>0.956615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3325</th>\n",
              "      <td>2000</td>\n",
              "      <td>RE</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Bay Area</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>34627</td>\n",
              "      <td>6762646</td>\n",
              "      <td>5.120333</td>\n",
              "      <td>5.066821</td>\n",
              "      <td>5.174408</td>\n",
              "      <td>0.027446</td>\n",
              "      <td>0.536016</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2dea6986-9b4f-4f4e-a523-88435e18bdcb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2dea6986-9b4f-4f4e-a523-88435e18bdcb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2dea6986-9b4f-4f4e-a523-88435e18bdcb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a416bea1-965f-4802-a65f-f3f0bd10ec9f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a416bea1-965f-4802-a65f-f3f0bd10ec9f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a416bea1-965f-4802-a65f-f3f0bd10ec9f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_region",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 197
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# first we need to see which measure of center will be the most useful for this data.\n",
        "\n",
        "df_region.plot.hist(column='rate', by = 'region_name', figsize=(10,50))\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RocpNScpUbVM",
        "outputId": "aed81e8f-506b-491a-a0b3-02bbab17c32c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x5000 with 14 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''because our data is not normally distributed and is heavily skewed right (on aggregate), our best measure of center would be the median. next we will find the median of the 'violent crime total' across all regions'''\n",
        "\n",
        "median_region_rate = df_region[df_region['strata_level_name_code'] == 5].groupby('region_name')['rate'].median().sort_values(ascending=False)"
      ],
      "metadata": {
        "id": "ARg8_zkBMlcr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create bar graph from above code\n",
        "\n",
        "\n",
        "cat_med = median_region_rate.index\n",
        "values_med = median_region_rate.values\n",
        "\n",
        "figure = plt.figure(figsize=(10,10))\n",
        "\n",
        "plt.subplot(3,1,1)\n",
        "\n",
        "plt.bar(cat_med, values_med)\n",
        "median_region_rate.plot(kind='bar')\n",
        "plt.xlabel('Region')\n",
        "plt.ylabel('Rate')\n",
        "plt.title('Median Violent Crime Rate per Region')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OJVuOh5KPxee",
        "outputId": "5090f8ee-3044-4045-8e2e-e6e75872be07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Based on the figure above we can see which regions had the highest median crime rate between the years of 2000-2013 where San Joaquin Valley has the most and the San Louis Obispo has the lowest."
      ],
      "metadata": {
        "id": "6-dJk2a0ZC_g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'''which crimes had the highest median in  San Joaquin Valley, Southern California, and Shasta between 2000-2013?'''\n",
        "\n",
        "\n",
        "top_three = 'San Joaquin Valley', 'Southern California', 'Shasta'\n",
        "top_region = df_region[(df_region['region_name'].isin(top_three)) & (df_region['strata_level_name_code'] != 5)]\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "xJT3JR2LZB7U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "for name in top_three:\n",
        "    top_region_crime = top_region[top_region['region_name'] == name].groupby('strata_level_name')['rate'].median().sort_values(ascending=False)\n",
        "\n",
        "    cat_med = top_region_crime.index\n",
        "    values_med = top_region_crime.values\n",
        "\n",
        "\n",
        "    plt.bar(cat_med, values_med)\n",
        "    top_region_crime.plot(kind='bar')\n",
        "    plt.xticks(rotation=25)\n",
        "    plt.xlabel('Crime Type')\n",
        "    plt.ylabel('Rate')\n",
        "    plt.title(f'Median Violent Crime Rate per Violent Crime in {name} from 2000-2013')\n",
        "\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#top_region_crime = top_region.groupby('strata_level_name')['rate'].median()\n",
        "\n",
        "#top_region_crime.plot.bar()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "_o3u-Wkdbof3",
        "outputId": "335ab270-15c7-4a29-fb9a-eead99873f19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lets see how the rate of these crimes look over time\n",
        "\n",
        "for region in top_three:\n",
        "    x = top_region[(top_region['region_name'] == region) & (top_region['geotype']== 'RE')]\n",
        "    for name,group in x.groupby('strata_level_name'):\n",
        "        plt.plot(group['reportyear'], group['rate'], label = name)\n",
        "    plt.xlabel('Year')\n",
        "    plt.ylabel('Rate')\n",
        "    plt.title(f'Median Violent Crime Rate Type Between 2000-2013 in {region}')\n",
        "    plt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "AQo6hwm8boOy",
        "outputId": "ba633c19-7925-4656-9a59-d7618305e7b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Interestingly we can see that aggrevated assault and robery follow a bit of a similar trend but robbery happens at a lower rate. We also see that in SJV those two crimes hardly decreased over time compared to the rest of the state. For Shasta aggrevated assult actually did the opposite and increased from 2000 to 2013. Shast also had sexual assualt rate compared to the other regions"
      ],
      "metadata": {
        "id": "MymNMQBOUQWt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Now which counties are struggling with the highest rates of crime within these regions?\n",
        "\n",
        "#first we will see how many counties there are in each region\n",
        "\n",
        "top_three_county = df_region = df[(df['geotype']== 'CO') & (df['region_name'].isin(top_three))]\n",
        "\n",
        "top_three_county.head()"
      ],
      "metadata": {
        "id": "7GryvkIKUKmq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "485d873e-870a-4fb3-8c7e-4a05824ed672"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    reportyear geotype  geotypevalue geoname  county_fips county_name  \\\n",
              "50        2000      CO        6019.0  Fresno       6019.0      Fresno   \n",
              "51        2000      CO        6019.0  Fresno       6019.0      Fresno   \n",
              "52        2000      CO        6019.0  Fresno       6019.0      Fresno   \n",
              "53        2000      CO        6019.0  Fresno       6019.0      Fresno   \n",
              "54        2000      CO        6019.0  Fresno       6019.0      Fresno   \n",
              "\n",
              "    region_code         region_name  strata_level_name_code  \\\n",
              "50         10.0  San Joaquin Valley                     1.0   \n",
              "51         10.0  San Joaquin Valley                     2.0   \n",
              "52         10.0  San Joaquin Valley                     3.0   \n",
              "53         10.0  San Joaquin Valley                     4.0   \n",
              "54         10.0  San Joaquin Valley                     5.0   \n",
              "\n",
              "                        strata_level_name  numerator  denominator      rate  \\\n",
              "50                     Aggravated assault       4131       799407   5.16758   \n",
              "51                          Sexual assult        273       799407  0.341503   \n",
              "52  Murder and non-negligent manslaughter         38       799407  0.047535   \n",
              "53                                Robbery       1599       799407  2.000233   \n",
              "54                    Violent crime total       6041       799407  7.556852   \n",
              "\n",
              "     ll_95ci   ul_95ci        se        rse  \n",
              "50  5.012766  5.327151  0.080193   1.551842  \n",
              "51  0.303330  0.384478  0.020665   6.051242  \n",
              "52  0.034635  0.065241  0.007711  16.221757  \n",
              "53  1.904655  2.100597  0.049971   2.498279  \n",
              "54  7.369364  7.749072  0.096859   1.281735  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6c56993-aec1-4750-bb3d-d206a5d96ef0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>2000</td>\n",
              "      <td>CO</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>4131</td>\n",
              "      <td>799407</td>\n",
              "      <td>5.16758</td>\n",
              "      <td>5.012766</td>\n",
              "      <td>5.327151</td>\n",
              "      <td>0.080193</td>\n",
              "      <td>1.551842</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>2000</td>\n",
              "      <td>CO</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>273</td>\n",
              "      <td>799407</td>\n",
              "      <td>0.341503</td>\n",
              "      <td>0.303330</td>\n",
              "      <td>0.384478</td>\n",
              "      <td>0.020665</td>\n",
              "      <td>6.051242</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>2000</td>\n",
              "      <td>CO</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>38</td>\n",
              "      <td>799407</td>\n",
              "      <td>0.047535</td>\n",
              "      <td>0.034635</td>\n",
              "      <td>0.065241</td>\n",
              "      <td>0.007711</td>\n",
              "      <td>16.221757</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>2000</td>\n",
              "      <td>CO</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>1599</td>\n",
              "      <td>799407</td>\n",
              "      <td>2.000233</td>\n",
              "      <td>1.904655</td>\n",
              "      <td>2.100597</td>\n",
              "      <td>0.049971</td>\n",
              "      <td>2.498279</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>2000</td>\n",
              "      <td>CO</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>6041</td>\n",
              "      <td>799407</td>\n",
              "      <td>7.556852</td>\n",
              "      <td>7.369364</td>\n",
              "      <td>7.749072</td>\n",
              "      <td>0.096859</td>\n",
              "      <td>1.281735</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6c56993-aec1-4750-bb3d-d206a5d96ef0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b6c56993-aec1-4750-bb3d-d206a5d96ef0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b6c56993-aec1-4750-bb3d-d206a5d96ef0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-901f9749-9e8b-4506-af77-9b6438c27fa0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-901f9749-9e8b-4506-af77-9b6438c27fa0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-901f9749-9e8b-4506-af77-9b6438c27fa0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top_three_county",
              "summary": "{\n  \"name\": \"top_three_county\",\n  \"rows\": 1050,\n  \"fields\": [\n    {\n      \"column\": \"reportyear\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2009,\n          2011,\n          2000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"CO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotypevalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.96237445636148,\n        \"min\": 6019.0,\n        \"max\": 6111.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          6071.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geoname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"San Bernardino\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_fips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.96237445636148,\n        \"min\": 6019.0,\n        \"max\": 6111.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          6071.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"San Bernardino\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9399959706305805,\n        \"min\": 10.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"San Joaquin Valley\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.414887478809902,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Sexual assult\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numerator\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 769,\n        \"samples\": [\n          5694\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"denominator\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 210,\n        \"samples\": [\n          828776\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 1050,\n        \"samples\": [\n          0.08592957836699429\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ll_95ci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1642346411942177,\n        \"min\": 0.0,\n        \"max\": 9.391695466858552,\n        \"num_unique_values\": 1050,\n        \"samples\": [\n          0.06602400539381281\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ul_95ci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.307880818428159,\n        \"min\": 0.021498695239941957,\n        \"max\": 9.620402388365491,\n        \"num_unique_values\": 1050,\n        \"samples\": [\n          0.11183580999748306\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"se\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 1050,\n        \"samples\": [\n          0.011586244150688884\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rse\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 1050,\n        \"samples\": [\n          13.483417899719594\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 204
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = top_three_county.groupby('county_name')['region_name'].unique().value_counts()\n",
        "x\n"
      ],
      "metadata": {
        "id": "eOlpn1m7UKgw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "outputId": "6bc02c13-9289-4abb-be73-530660c4adb3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "region_name\n",
              "[San Joaquin Valley]     8\n",
              "[Southern California]    6\n",
              "[Shasta]                 1\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_name</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>[San Joaquin Valley]</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[Southern California]</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>[Shasta]</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 205
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Shasta only has one country so we will look at which counties in SJV and Southern California have the highest crime rates between 2000-2013"
      ],
      "metadata": {
        "id": "GJLV9prm35VB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "total_county = top_three_county[top_three_county['strata_level_name_code'] == 5]\n",
        "total_county.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-uOx7ZzDlAYO",
        "outputId": "199a57c8-5344-4ea8-e6a7-b912926a8545"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    reportyear geotype  geotypevalue      geoname  county_fips  county_name  \\\n",
              "54        2000      CO        6019.0       Fresno       6019.0       Fresno   \n",
              "69        2000      CO        6025.0     Imperial       6025.0     Imperial   \n",
              "79        2000      CO        6029.0         Kern       6029.0         Kern   \n",
              "84        2000      CO        6031.0        Kings       6031.0        Kings   \n",
              "99        2000      CO        6037.0  Los Angeles       6037.0  Los Angeles   \n",
              "\n",
              "    region_code          region_name  strata_level_name_code  \\\n",
              "54         10.0   San Joaquin Valley                     5.0   \n",
              "69         14.0  Southern California                     5.0   \n",
              "79         10.0   San Joaquin Valley                     5.0   \n",
              "84         10.0   San Joaquin Valley                     5.0   \n",
              "99         14.0  Southern California                     5.0   \n",
              "\n",
              "      strata_level_name  numerator  denominator      rate   ll_95ci   ul_95ci  \\\n",
              "54  Violent crime total       6041       799407  7.556852  7.369364  7.749072   \n",
              "69  Violent crime total        707       142361  4.966248  4.614204  5.345007   \n",
              "79  Violent crime total       3237       661645  4.892352  4.727078  5.063374   \n",
              "84  Violent crime total        364       129461  2.811658  2.537602  3.115218   \n",
              "99  Violent crime total      89986      9519338  9.452968  9.391695  9.514637   \n",
              "\n",
              "          se       rse  \n",
              "54  0.096859  1.281735  \n",
              "69  0.186311  3.751537  \n",
              "79  0.085779   1.75333  \n",
              "84  0.147164   5.23405  \n",
              "99  0.031363   0.33178  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-054c14bc-1ee2-4d19-9bf6-f706a39bde05\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>2000</td>\n",
              "      <td>CO</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>6019.0</td>\n",
              "      <td>Fresno</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>6041</td>\n",
              "      <td>799407</td>\n",
              "      <td>7.556852</td>\n",
              "      <td>7.369364</td>\n",
              "      <td>7.749072</td>\n",
              "      <td>0.096859</td>\n",
              "      <td>1.281735</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>2000</td>\n",
              "      <td>CO</td>\n",
              "      <td>6025.0</td>\n",
              "      <td>Imperial</td>\n",
              "      <td>6025.0</td>\n",
              "      <td>Imperial</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>707</td>\n",
              "      <td>142361</td>\n",
              "      <td>4.966248</td>\n",
              "      <td>4.614204</td>\n",
              "      <td>5.345007</td>\n",
              "      <td>0.186311</td>\n",
              "      <td>3.751537</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>2000</td>\n",
              "      <td>CO</td>\n",
              "      <td>6029.0</td>\n",
              "      <td>Kern</td>\n",
              "      <td>6029.0</td>\n",
              "      <td>Kern</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>3237</td>\n",
              "      <td>661645</td>\n",
              "      <td>4.892352</td>\n",
              "      <td>4.727078</td>\n",
              "      <td>5.063374</td>\n",
              "      <td>0.085779</td>\n",
              "      <td>1.75333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>84</th>\n",
              "      <td>2000</td>\n",
              "      <td>CO</td>\n",
              "      <td>6031.0</td>\n",
              "      <td>Kings</td>\n",
              "      <td>6031.0</td>\n",
              "      <td>Kings</td>\n",
              "      <td>10.0</td>\n",
              "      <td>San Joaquin Valley</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>364</td>\n",
              "      <td>129461</td>\n",
              "      <td>2.811658</td>\n",
              "      <td>2.537602</td>\n",
              "      <td>3.115218</td>\n",
              "      <td>0.147164</td>\n",
              "      <td>5.23405</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>2000</td>\n",
              "      <td>CO</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>89986</td>\n",
              "      <td>9519338</td>\n",
              "      <td>9.452968</td>\n",
              "      <td>9.391695</td>\n",
              "      <td>9.514637</td>\n",
              "      <td>0.031363</td>\n",
              "      <td>0.33178</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-054c14bc-1ee2-4d19-9bf6-f706a39bde05')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-054c14bc-1ee2-4d19-9bf6-f706a39bde05 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-054c14bc-1ee2-4d19-9bf6-f706a39bde05');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-898f7335-dbf9-45f3-a808-ee41cc6e715d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-898f7335-dbf9-45f3-a808-ee41cc6e715d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-898f7335-dbf9-45f3-a808-ee41cc6e715d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "total_county",
              "summary": "{\n  \"name\": \"total_county\",\n  \"rows\": 210,\n  \"fields\": [\n    {\n      \"column\": \"reportyear\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2009,\n          2011,\n          2000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"CO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotypevalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.019663943580138,\n        \"min\": 6019.0,\n        \"max\": 6111.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          6071.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geoname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"San Bernardino\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_fips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.019663943580138,\n        \"min\": 6019.0,\n        \"max\": 6111.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          6071.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"San Bernardino\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9437053353381568,\n        \"min\": 10.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"San Joaquin Valley\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 5.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Violent crime total\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numerator\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 206,\n        \"samples\": [\n          6378\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"denominator\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 210,\n        \"samples\": [\n          828776\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 210,\n        \"samples\": [\n          6.162099288589438\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ll_95ci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7404015206356074,\n        \"min\": 1.8459637635993607,\n        \"max\": 9.391695466858552,\n        \"num_unique_values\": 210,\n        \"samples\": [\n          5.995891836293838\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ul_95ci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7989898597931606,\n        \"min\": 1.986745944020602,\n        \"max\": 9.620402388365491,\n        \"num_unique_values\": 210,\n        \"samples\": [\n          6.332884694799413\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"se\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 210,\n        \"samples\": [\n          0.08596141192909532\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rse\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 210,\n        \"samples\": [\n          1.395002058604815\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 207
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = total_county.groupby('county_name')['rate'].median().sort_values(ascending=False)\n",
        "\n",
        "cat_med = x.index\n",
        "values_med = x.values\n",
        "\n",
        "figure = plt.figure(figsize=(10,10))\n",
        "\n",
        "plt.subplot(3,1,1)\n",
        "\n",
        "plt.bar(cat_med, values_med)\n",
        "x.plot(kind='bar')\n",
        "plt.xlabel('County')\n",
        "plt.ylabel('Rate')\n",
        "plt.title('Median Violent Crime Rate per County')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vg3KQRUo4NgD",
        "outputId": "45602b2e-012d-4a7e-953e-c21b3a5ea9b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0EAAAGVCAYAAAA4zfrJAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAcKZJREFUeJzt3XVYVOnfBvB7QEpJBcRAQkwwsF27RXTtTsR21cXEtdvVVbHXRNgVu3XtwF4DFKy1WywEBRQUnvcPXubHyKCA6Jkzc3+ui+tyzjnD3AfG4XzPUwohhAAREREREZGO0JM6ABERERER0Y/EIoiIiIiIiHQKiyAiIiIiItIpLIKIiIiIiEinsAgiIiIiIiKdwiKIiIiIiIh0CosgIiIiIiLSKSyCiIiIiIhIp7AIIiIiIiIincIiiIi0hqOjI3r06KF8fOzYMSgUChw7dkyyTBlRu3Zt1K5dO0vPVSgUmDhxYrbm0RQTJ06EQqGQOgYREWkhFkFElK3WrFkDhUIBhUKBkydPptkvhIC9vT0UCgWaNm0qQcLv68WLF8iRIwe6dOmS7jHv3r2DiYkJWrVq9QOTZV1QUBD8/Pwy9ZzExET4+/ujdu3ayJ07N4yMjODo6AgvLy9cuHDh+wT9zu7fv698bysUCujp6SF37tzw8PDAmTNnsvx9lyxZgjVr1mRfUA0jh/fCtWvXMHHiRNy/f1/qKET0g7AIIqLvwtjYGEFBQWm2BwcH4/HjxzAyMvruGWrWrIn379+jZs2a3/21Utja2qJBgwbYsWMH4uLi1B6zdetWfPjwQVkoHThwAAcOHPhhGTMrs0XQ+/fv0bRpU/Ts2RNCCPz2229YunQpunXrhjNnzqBSpUp4/PjxV7/P2LFj8f79+29I/n107NgRf/31F/z9/dG/f3+cPXsWderUQXh4eJa+nzYXQdn1Xvjerl27hkmTJrEIItIhOaQOQETaqUmTJti0aRMWLFiAHDn+91ETFBSE8uXL49WrV989g56eHoyNjb/763yuc+fO2LdvH3bu3IkOHTqk2R8UFAQLCwt4enoCAAwNDX90xO9qxIgR2LdvH+bNm4dff/1VZd+ECRMwb968Lz4/NjYWuXLlQo4cOVTeO5qiXLlyKi19NWrUgIeHB5YuXYolS5ZImOzH+/TpE5KSktJ9D3/re4GI6HthSxARfRcdO3bE69evcfDgQeW2hIQEbN68GZ06dVL7nKSkJPj5+cHV1RXGxsbImzcv+vbtizdv3qgcJ4TA1KlTUbBgQeTMmRN16tTB1atX03w/dWOCTpw4gbZt26JQoUIwMjKCvb09fHx80rQ49OjRA6ampnjy5AlatGgBU1NT2NjYYPjw4UhMTPziubds2RK5cuVS2xL24sULHD58GG3atFG2hqkbE/TixQt4e3sjb968MDY2RpkyZRAQEPDF103x5MkT9OzZE3nz5oWRkRFcXV2xevVqtT+bjRs3Ytq0aShYsCCMjY1Rr1493L59W3lc7dq1sWfPHjx48EDZDczR0THd1378+DGWLVuGBg0apLnoBQB9fX0MHz4cBQsWBPC/cT/Xrl1Dp06dYGVlherVq6vsS02hUOCXX37Bpk2bULJkSZiYmKBq1arKVphly5bBxcUFxsbGqF27tto7+//++y8aN24MCwsL5MyZE7Vq1cKpU6cy8qNVq0aNGgCAO3fuqGz39/dH3bp1YWtrCyMjI5QsWRJLly5VOcbR0RFXr15FcHCw8ueb+r0QFRWFX3/9Ffb29jAyMoKLiwt+//13JCUlfTWXo6MjmjZtigMHDqBs2bIwNjZGyZIlsXXr1jTHZuR1UroD/vHHH/Dz80PhwoVhZGSEa9euqX39zL4XACA0NBQeHh4wNzeHqakp6tWrh7Nnz6o8L72xYildcVP/zlN+BidPnkSlSpVgbGwMZ2dnBAYGqjyvbdu2AIA6deoofw/Hjh1D9+7dYW1tjY8fP6Z5vYYNG6JYsWJqz52INJ/m3WIjIq3g6OiIqlWrYt26dfDw8AAA7N27F9HR0ejQoQMWLFiQ5jl9+/bFmjVr4OXlhcGDB+PevXtYtGgRQkNDcerUKRgYGAAAxo8fj6lTp6JJkyZo0qQJQkJC0LBhQyQkJHw116ZNmxAXF4f+/fsjT548OHfuHBYuXIjHjx9j06ZNKscmJiaiUaNGqFy5Mv744w8cOnQIc+bMQeHChdG/f/90XyNXrlxo3rw5Nm/ejMjISOTOnVu5b8OGDUhMTETnzp3Tff779+9Ru3Zt3L59G7/88gucnJywadMm9OjRA1FRURgyZEi6z33+/DmqVKmiLBZsbGywd+9eeHt74+3bt2kuRmfOnAk9PT0MHz4c0dHRmDVrFjp37ox///0XADBmzBhER0fj8ePHyrv2pqam6b7+3r178enTJ3Tt2jXdY9Rp27YtihQpgunTp0MI8cVjT5w4gZ07d2LgwIEAgBkzZqBp06YYOXIklixZggEDBuDNmzeYNWsWevbsiSNHjiife+TIEXh4eKB8+fKYMGEC9PT0lMXKiRMnUKlSpUzlBqC86LayslLZvnTpUri6uuLnn39Gjhw5sGvXLgwYMABJSUnK7H5+fhg0aBBMTU0xZswYAEDevHkBAHFxcahVqxaePHmCvn37olChQjh9+jRGjx6NZ8+eZaiL4q1bt9C+fXv069cP3bt3h7+/P9q2bYt9+/ahQYMGWXodf39/fPjwAX369IGRkZHK+zu1zL4Xrl69iho1asDc3BwjR46EgYEBli1bhtq1ayM4OBiVK1fO0Pf53O3bt9GmTRt4e3uje/fuWL16NXr06IHy5cvD1dUVNWvWxODBg7FgwQL89ttvKFGiBACgRIkS6Nq1KwIDA7F//36VMYwRERE4cuQIJkyYkKVMRKQBBBFRNvL39xcAxPnz58WiRYuEmZmZiIuLE0II0bZtW1GnTh0hhBAODg7C09NT+bwTJ04IAGLt2rUq32/fvn0q21+8eCEMDQ2Fp6enSEpKUh7322+/CQCie/fuym1Hjx4VAMTRo0eV21KypDZjxgyhUCjEgwcPlNu6d+8uAIjJkyerHOvu7i7Kly//1Z/Dnj17BACxbNkyle1VqlQRBQoUEImJicpttWrVErVq1VI+9vPzEwDE33//rdyWkJAgqlatKkxNTcXbt2+V2wGICRMmKB97e3uLfPnyiVevXqm8bocOHYSFhYXy/FN+NiVKlBDx8fHK4+bPny8AiPDwcOU2T09P4eDg8NVzFkIIHx8fAUCEhoZm6PgJEyYIAKJjx47p7ksNgDAyMhL37t1Tblu2bJkAIOzs7FR+NqNHjxYAlMcmJSWJIkWKiEaNGqm8d+Li4oSTk5No0KDBF7Peu3dPABCTJk0SL1++FBEREeLEiROiYsWKAoDYtGmTyvHq3muNGjUSzs7OKttcXV1Vfv8ppkyZInLlyiVu3rypst3X11fo6+uLhw8ffjGvg4ODACC2bNmi3BYdHS3y5csn3N3dM/06Kedvbm4uXrx48cXXFiLz74UWLVoIQ0NDcefOHeW2p0+fCjMzM1GzZk3lNnXvCyH+99mT+r2R8jM4fvy4ctuLFy+EkZGRGDZsmHLbpk2b0nxWCCFEYmKiKFiwoGjfvr3K9rlz5wqFQiHu3r2boXMjIs3D7nBE9N20a9cO79+/x+7du/Hu3Tvs3r073a5wmzZtgoWFBRo0aIBXr14pv8qXLw9TU1McPXoUAHDo0CEkJCRg0KBBKl1i1HW3UcfExET579jYWLx69Qo//fQThBAIDQ1Nc3y/fv1UHteoUQN379796us0bNgQNjY2Kl3i7t27h7Nnz6Jjx47Q00v/4/eff/6BnZ0dOnbsqNxmYGCAwYMHIyYmBsHBwWqfJ4TAli1b0KxZMwghVH6OjRo1QnR0NEJCQlSe4+XlpTKeI6VrV0bOUZ23b98CAMzMzDL1vM9/zl9Sr149lS55KS0ErVu3VnndlO0p53Lp0iXcunULnTp1wuvXr5U/m9jYWNSrVw/Hjx/PUDezCRMmwMbGBnZ2dqhRowauX7+OOXPmoE2bNirHpX6vRUdH49WrV6hVqxbu3r2L6Ojor77Opk2bUKNGDVhZWan8LuvXr4/ExEQcP378q98jf/78aNmypfKxubk5unXrhtDQUERERGTpdVq3bg0bG5uvvnZm3guJiYk4cOAAWrRoAWdnZ+X2fPnyoVOnTjh58qTy+2VWyZIlle9rALCxsUGxYsUy9B7X09ND586dsXPnTrx79065fe3atfjpp5/g5OSUpUxEJD12hyOi78bGxgb169dHUFAQ4uLikJiYmOZCMcWtW7cQHR0NW1tbtftfvHgBAHjw4AEAoEiRImle6/PuSOo8fPgQ48ePx86dO9OMNfr8wtTY2DjNxZ6VlVWa56mTI0cOtG/fHkuWLMGTJ09QoEABZUH0pa5wQPI5FilSJE2hlNJNJ+Vn8LmXL18iKioKy5cvx/Lly9Uek/JzTFGoUCGVxyk/w4ycozrm5uYAoHLBmBGZuZj8PLOFhQUAwN7eXu32lHO5desWAKB79+7pfu/o6Oivvo/69OmDtm3b4sOHDzhy5AgWLFigdpzYqVOnMGHCBJw5cybNTIHR0dHKfOm5desWwsLC0i04Pv9dquPi4pJm/EzRokUBJHfjs7Ozy/TrZPR3lZn3wsuXLxEXF6d2jE2JEiWQlJSER48ewdXVNUOvndrn7xcg4/+PAaBbt274/fffsW3bNnTr1g3//fcfLl68iD///DPTWYhIc7AIIqLvqlOnTujduzciIiLg4eEBS0tLtcclJSXB1tYWa9euVbs/I3eevyYxMRENGjRAZGQkRo0aheLFiyNXrlx48uQJevTokaYVQF9f/5ter0uXLli0aBHWrVuH4cOHY926dShZsiTKli37Td83PSn5u3Tpku6FfunSpVUep3eO4ivjctJTvHhxAEB4eHimzjN1q8nXpJf5a+eS8vOZPXt2utm+NN4pRZEiRVC/fn0AQNOmTaGvrw9fX1/UqVMHFSpUAJA8SUK9evVQvHhxzJ07F/b29jA0NMQ///yDefPmZajFKSkpCQ0aNMDIkSPV7k8pZr5VZl8no7+rrL4Xvia9BXTTm7DkW9/jJUuWRPny5fH333+jW7du+Pvvv2FoaIh27dplLDARaSQWQUT0XbVs2RJ9+/bF2bNnsWHDhnSPK1y4MA4dOoRq1ap98SLLwcEBQPJd8tTdZl6+fPnVO7vh4eG4efMmAgIC0K1bN+X21DPYZafKlSujcOHCCAoKQoMGDXD16lVMmzbtq89zcHBAWFgYkpKSVFqDbty4odyvjo2NDczMzJCYmKi8SM8O6V10quPh4QF9fX38/fffmZ4c4XsrXLgwgOQWiuz8+YwZMwYrVqzA2LFjsW/fPgDArl27EB8fj507d6q0RKR060wtvZ9v4cKFERMT801Zb9++DSGEymvcvHkTAJRdCrPjddTJzHvBxsYGOXPmxH///Zdm340bN6Cnp6ds6UtpqYuKilK5qZJeC2lGfO093q1bNwwdOhTPnj1DUFAQPD09M9TyTESai2OCiOi7MjU1xdKlSzFx4kQ0a9Ys3ePatWuHxMRETJkyJc2+T58+ISoqCgBQv359GBgYYOHChSp3cjMyU1bKHeHUzxNCYP78+Rk8m8zr3LkzQkNDMWHCBCgUinTHRKXWpEkTREREqBSNnz59wsKFC2FqaopatWqpfZ6+vj5at26NLVu24MqVK2n2v3z5MkvnkCtXrgyNYQGSu6T17t0bBw4cwMKFC9PsT0pKwpw5cyRZILN8+fIoXLgw/vjjD8TExKTZn9Wfj6WlJfr27Yv9+/fj0qVLANS/16Kjo+Hv75/m+bly5VK+v1Nr164dzpw5g/3796fZFxUVhU+fPn0129OnT7Ft2zbl47dv3yIwMBBly5aFnZ1dtr2OOpl5L+jr66Nhw4bYsWOHyhTXz58/R1BQEKpXr67sXpdSzKYeqxQbG5vhKeTVyZUrFwCo/T0AyVP+KxQKDBkyBHfv3lVZJ4qI5IktQUT03X1pDEaKWrVqoW/fvpgxYwYuXbqEhg0bwsDAALdu3cKmTZswf/58tGnTRrlWT8q0yE2aNEFoaCj27t0La2vrL75G8eLFUbhwYQwfPhxPnjyBubk5tmzZkuXxLxnRpUsXTJ48GTt27EC1atW+uMZOij59+mDZsmXo0aMHLl68CEdHR2zevBmnTp2Cn5/fFweaz5w5E0ePHkXlypXRu3dvlCxZEpGRkQgJCcGhQ4cQGRmZ6XMoX748NmzYgKFDh6JixYowNTX9YkE7Z84c3LlzB4MHD8bWrVvRtGlTWFlZ4eHDh9i0aRNu3LihdhHZ701PTw8rV66Eh4cHXF1d4eXlhQIFCuDJkyc4evQozM3NsWvXrix97yFDhsDPzw8zZ87E+vXr0bBhQxgaGqJZs2bo27cvYmJisGLFCtja2uLZs2cqzy1fvjyWLl2KqVOnwsXFBba2tqhbty5GjBiBnTt3omnTpsopnWNjYxEeHo7Nmzfj/v37X33PFy1aFN7e3jh//jzy5s2L1atX4/nz5yrFWHa8Tnoy816YOnUqDh48iOrVq2PAgAHIkSMHli1bhvj4eMyaNUv5PRs2bIhChQrB29sbI0aMgL6+PlavXg0bGxs8fPgwSznLli0LfX19/P7774iOjoaRkZFyjScguaWqcePG2LRpEywtLZULHRORjEk0Kx0RaanUU2R/yedTZKdYvny5KF++vDAxMRFmZmaiVKlSYuTIkeLp06fKYxITE8WkSZNEvnz5hImJiahdu7a4cuWKcHBw+OoU2deuXRP169cXpqamwtraWvTu3VtcvnxZABD+/v7K47p37y5y5cqVJl960/N+ScoUykuWLFG7//MpsoUQ4vnz58LLy0tYW1sLQ0NDUapUKZV8KfDZFNkpzx04cKCwt7cXBgYGws7OTtSrV08sX75ceUzKz+bzaZ1TpkFO/VoxMTGiU6dOwtLSUgDI0HTZnz59EitXrhQ1atQQFhYWwsDAQDg4OAgvLy+VKZNTfp4vX75M8z3SmyJ74MCBajPPnj1bZXt65xgaGipatWol8uTJI4yMjISDg4No166dOHz48BfPKb3XSdGjRw+hr68vbt++LYQQYufOnaJ06dLC2NhYODo6it9//12sXr06zTTOERERwtPTU5iZmQkAKu+Fd+/eidGjRwsXFxdhaGgorK2txU8//ST++OMPkZCQ8MW8Kf/H9u/fL0qXLi2MjIxE8eLF0/w8Mvo6Xzv/9GT0vSCEECEhIaJRo0bC1NRU5MyZU9SpU0ecPn06zfe8ePGiqFy5sjA0NBSFChUSc+fOTXeKbHWfM+r+z61YsUI4OzsLfX19tdNlb9y4UQAQffr0ydT5E5FmUgiRxdGvREREpLEcHR3h5uaG3bt3Sx1FK+zYsQMtWrTA8ePHVabcJiJ54pggIiIioq9YsWIFnJ2dUb16damjEFE24JggIiIionSsX78eYWFh2LNnD+bPn5+p2RKJSHOxCCIiIiJKR8eOHWFqagpvb28MGDBA6jhElE04JoiIiIiIiHQKxwQREREREZFOYRFEREREREQ6RdZjgpKSkvD06VOYmZlxoCIRERERkQ4TQuDdu3fInz8/9PS+3NYj6yLo6dOnsLe3lzoGERERERFpiEePHqFgwYJfPEbWRZCZmRmA5BM1NzeXOA0REREREUnl7du3sLe3V9YIXyLrIiilC5y5uTmLICIiIiIiytAwGU6MQEREREREOoVFEBERERER6RQWQUREREREpFNYBBERERERkU5hEURERERERDqFRRAREREREekUFkFERERERKRTWAQREREREZFOkfViqelx9N0jdYQMuT/TU+oIREREREQ6hy1BRERERESkU1gEERERERGRTmERREREREREOoVFEBERERER6RQWQUREREREpFNYBBERERERkU5hEURERERERDqFRRAREREREekUFkFERERERKRTWAQREREREZFOYRFEREREREQ6hUUQERERERHpFBZBRERERESkUyQtghITEzFu3Dg4OTnBxMQEhQsXxpQpUyCEkDIWERERERFpsRxSvvjvv/+OpUuXIiAgAK6urrhw4QK8vLxgYWGBwYMHSxmNiIiIiIi0lKRF0OnTp9G8eXN4enoCABwdHbFu3TqcO3dOylhERERERKTFJO0O99NPP+Hw4cO4efMmAODy5cs4efIkPDw8pIxFRERERERaTNKWIF9fX7x9+xbFixeHvr4+EhMTMW3aNHTu3Fnt8fHx8YiPj1c+fvv27Y+KSkREREREWkLSlqCNGzdi7dq1CAoKQkhICAICAvDHH38gICBA7fEzZsyAhYWF8sve3v4HJyYiIiIiIrlTCAmnYrO3t4evry8GDhyo3DZ16lT8/fffuHHjRprj1bUE2dvbIzo6Gubm5srtjr57vm/wbHJ/pqfUEYiIiIiItMLbt29hYWGRpjZQR9LucHFxcdDTU22M0tfXR1JSktrjjYyMYGRk9COiERERERGRlpK0CGrWrBmmTZuGQoUKwdXVFaGhoZg7dy569uwpZSwiIiIiItJikhZBCxcuxLhx4zBgwAC8ePEC+fPnR9++fTF+/HgpYxERERERkRaTtAgyMzODn58f/Pz8pIxBREREREQ6RNLZ4YiIiIiIiH40FkFERERERKRTWAQREREREZFOYRFEREREREQ6hUUQERERERHpFBZBRERERESkU1gEERERERGRTmERREREREREOoVFEBERERER6RQWQUREREREpFNYBBERERERkU5hEURERERERDqFRRAREREREekUFkFERERERKRTWAQREREREZFOYRFEREREREQ6hUUQERERERHpFBZBRERERESkU1gEERERERGRTmERREREREREOoVFEBERERER6RQWQUREREREpFNYBBERERERkU5hEURERERERDqFRRAREREREekUFkFERERERKRTWAQREREREZFOYRFEREREREQ6hUUQERERERHpFBZBRERERESkU1gEERERERGRTmERREREREREOiWH1AHo6xx990gd4avuz/SUOgIRERERUYawJYiIiIiIiHQKiyAiIiIiItIpLIKIiIiIiEinsAgiIiIiIiKdwokR6IfjRA9EREREJCW2BBERERERkU6RvAh68uQJunTpgjx58sDExASlSpXChQsXpI5FRERERERaStLucG/evEG1atVQp04d7N27FzY2Nrh16xasrKykjEVERERERFpM0iLo999/h729Pfz9/ZXbnJycJExERERERETaTtLucDt37kSFChXQtm1b2Nrawt3dHStWrEj3+Pj4eLx9+1bli4iIiIiIKDMkLYLu3r2LpUuXokiRIti/fz/69++PwYMHIyAgQO3xM2bMgIWFhfLL3t7+BycmIiIiIiK5k7QISkpKQrly5TB9+nS4u7ujT58+6N27N/7880+1x48ePRrR0dHKr0ePHv3gxEREREREJHeSFkH58uVDyZIlVbaVKFECDx8+VHu8kZERzM3NVb6IiIiIiIgyQ9IiqFq1avjvv/9Utt28eRMODg4SJSIiIiIi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IiLSKSyCiIiIiIhIp7AIIiIiIiIincIiiIiIiIiIdAqLICIiIiIi0iksgoiIiIiISKewCCIiIiIiIp3CIoiIiIiIiHQKiyAiIiIiItIpLIKIiIiIiEinsAgiIiIiIiKdkkPqAEREREREcufou0fqCF91f6an1BE0BluCiIiIiIhIp7AIIiIiIiIincIiiIiIiIiIdArHBBERERERkQptH+PEliAiIiIiItIpLIKIiIiIiEinsAgiIiIiIiKdwiKIiIiIiIh0CosgIiIiIiLSKSyCiIiIiIhIp7AIIiIiIiIincIiiIiIiIiIdAqLICIiIiIi0imSFkEzZsxAxYoVYWZmBltbW7Ro0QL//feflJGIiIiIiEjLSVoEBQcHY+DAgTh79iwOHjyIjx8/omHDhoiNjZUyFhERERERabEcUr74vn37VB6vWbMGtra2uHjxImrWrClRKiIiIiIi0maSFkGfi46OBgDkzp1b7f74+HjEx8crH799+/aH5CIiIiIiIu2hMRMjJCUl4ddff0W1atXg5uam9pgZM2bAwsJC+WVvb/+DUxIRERERkdxpTBE0cOBAXLlyBevXr0/3mNGjRyM6Olr59ejRox+YkIiIiIiItIFGdIf75ZdfsHv3bhw/fhwFCxZM9zgjIyMYGRn9wGRERERERKRtJC2ChBAYNGgQtm3bhmPHjsHJyUnKOEREREREpAMkLYIGDhyIoKAg7NixA2ZmZoiIiAAAWFhYwMTERMpoRERERESkpSQdE7R06VJER0ejdu3ayJcvn/Jrw4YNUsYiIiIiIiItJnl3OCIiIiIioh9JY2aHIyIiIiIi+hFYBBERERERkU5hEURERERERDqFRRAREREREekUFkFERERERKRTWAQREREREZFOYRFEREREREQ6hUUQERERERHpFBZBRERERESkU1gEERERERGRTmERREREREREOoVFEBERERER6RQWQUREREREpFNYBBERERERkU5hEURERERERDqFRRAREREREekUFkFERERERKRTWAQREREREZFOYRFEREREREQ6hUUQERERERHpFBZBRERERESkU1gEERERERGRTmERREREREREOoVFEBERERER6RQWQUREREREpFNYBBERERERkU5hEURERERERDqFRRAREREREekUFkFERERERKRTWAQREREREZFOYRFEREREREQ6hUUQERERERHpFBZBRERERESkU1gEERERERGRTmERREREREREOoVFEBERERER6RQWQUREREREpFNYBBERERERkU7RiCJo8eLFcHR0hLGxMSpXroxz585JHYmIiIiIiLSU5EXQhg0bMHToUEyYMAEhISEoU6YMGjVqhBcvXkgdjYiIiIiItJDkRdDcuXPRu3dveHl5oWTJkvjzzz+RM2dOrF69WupoRERERESkhSQtghISEnDx4kXUr19fuU1PTw/169fHmTNnJExGRERERETaKoeUL/7q1SskJiYib968Ktvz5s2LGzdupDk+Pj4e8fHxysfR0dEAgLdv36oclxQf9x3SZr/Pc6dHDueT0XMBtOt85HAugHadD99rmk2bzofvNc2mTefD95pm06bz0fb3WspjIcRXn6sQGTnqO3n69CkKFCiA06dPo2rVqsrtI0eORHBwMP7991+V4ydOnIhJkyb96JhERERERCQTjx49QsGCBb94jKQtQdbW1tDX18fz589Vtj9//hx2dnZpjh89ejSGDh2qfJyUlITIyEjkyZMHCoXiu+V8+/Yt7O3t8ejRI5ibm3+31/lRtOl8tOlcAJ6PJtOmcwF4PppMm84F4PloMm06F4Dno8l+1LkIIfDu3Tvkz5//q8dKWgQZGhqifPnyOHz4MFq0aAEgubA5fPgwfvnllzTHGxkZwcjISGWbpaXlD0iazNzcXPZvwtS06Xy06VwAno8m06ZzAXg+mkybzgXg+WgybToXgOejyX7EuVhYWGToOEmLIAAYOnQounfvjgoVKqBSpUrw8/NDbGwsvLy8pI5GRERERERaSPIiqH379nj58iXGjx+PiIgIlC1bFvv27UszWQIREREREVF2kLwIAoBffvlFbfc3TWFkZIQJEyak6YonV9p0Ptp0LgDPR5Np07kAPB9Npk3nAvB8NJk2nQvA89Fkmnguks4OR0RERERE9KNJulgqERERERHRj8YiiIiIiIiIdAqLICIiIiIi0iksgoiIiIiISKewCFIjMTERq1atQqdOnVC/fn3UrVtX5UtuAgICsGfPHuXjkSNHwtLSEj/99BMePHggYTIizfbXX3+hWrVqyJ8/v/L/ip+fH3bs2CFxMiJ5ePz4MR4/fix1DCKiNFgEqTFkyBAMGTIEiYmJcHNzQ5kyZVS+5Gb69OkwMTEBAJw5cwaL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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Above are the top three counties with the highest crime rate per 1000 within the three regions with the highest crime rate. Most of these counties are within the SJV region."
      ],
      "metadata": {
        "id": "qKGyU_7oYaJ9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# look at the crime rates over time by crime type for each San Joaquin, Los Angeles, and Merced.\n",
        "\n",
        "top_county = 'San Joaquin', 'Los Angeles', 'Merced'\n",
        "\n",
        "for county in top_county:\n",
        "    x = top_three_county[(top_three_county['county_name'] == county) & (top_three_county['geotype']== 'CO') & (top_three_county['strata_level_name_code'] != 5)]\n",
        "    for name,group in x.groupby('strata_level_name'):\n",
        "        plt.plot(group['reportyear'], group['rate'], label = name)\n",
        "    plt.xlabel('Year')\n",
        "    plt.ylabel('Rate')\n",
        "    plt.title(f'Median Violent Crime Rate Type Between 2000-2013 in {county} County')\n",
        "    plt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ZFWH983Z4Otn",
        "outputId": "cdaa0705-9e89-4078-c53d-50949771288f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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YtSoUXr33Xfl9/tj69555x0NGjSo3R0Sm6o+kcK3Ixk/frwefvhh/du//VtC6g8AOMak60pCx5Lrr7/e5OfnmxUrVphdu3bFptra2liZadOmmX79+plly5aZTz75xIwaNcqMGjUqtj0QCJghQ4aYsWPHmnXr1pm33nrL9OjRw8yaNStW5ptvvjFZWVlm5syZ5osvvjDz5883TqfTvPXWWyltb1ukqk8WLVpkXC6XmT9/ftzrHDhwIKXtbatU9Utz7flqsanqk6qqKtO3b1/z05/+1GzcuNGsXLnSnHjiieaaa65JaXvbIlV9snDhQuNyucyCBQvM5s2bzapVq8yIESPMmWeemdL2tlUi+sUYYzZt2mTWrl1rrrvuOjNw4ECzdu1as3bt2tjVYQ8cOGB69uxprrzySrNhwwazePFik5WVZZ566qmUtrctUtUny5YtM1lZWWbWrFlxr9MRr74MAEgewmUCSGp1WrhwYaxMXV2dueGGG0yXLl1MVlaWueyyy8yuXbvi9rN161Zz8cUXG6/Xa7p3725+/etfG7/fH1dm+fLlZtiwYSYzM9Mcf/zxca/RnqSqT84777xWX2fKlCkpaumRSeXfSlPtOVymsk+++OILM2bMGOP1ek3fvn3NjBkz4r6Etxep7JN58+aZU045xXi9XlNUVGSuuOIKs2PHjlQ084glql8O9r6xZcuWWJlPP/3UnH322cbtdps+ffqYhx56KEWtPDKp6pMpU6a0uv28885LXWMBAO2eZUw7PPYJAAAAANChcM4lAAAAAMA2wiUAAAAAwDbCJQAAAADANsIlAAAAAMA2wiUAAAAAwDbCJQAAAADANsIlAAAAAMA2wiUAAAAAwDbCJYBjhjFGY8aM0bhx41psW7BggQoKCrRjx4401AwAAODYR7gEcMywLEsLFy7Uhx9+qKeeeiq2fsuWLbrjjjv0+OOPq2/fvgl9Tb/fn9D9AQAAdFSESwDHlOLiYv3+97/X7bffri1btsgYo6uvvlpjx47V6aefrosvvlg5OTnq2bOnrrzySu3duzf23Lfeektnn322CgoK1K1bN/3rv/6rNm/eHNu+detWWZalP//5zzrvvPPk8Xi0aNGidDQTAACg3bGMMSbdlQCARJs4caIqKir04x//WA8++KA2btyowYMH65prrtHkyZNVV1enO++8U4FAQMuWLZMkvfrqq7IsS6eddpqqq6t13333aevWrVq3bp0cDoe2bt2q4447TgMGDNBvf/tbnX766fJ4PCoqKkpzawEAANKPcAngmFRaWqrBgwdr3759evXVV7Vhwwa99957evvtt2NlduzYoeLiYpWUlGjgwIEt9rF371716NFD69ev15AhQ2Lh8rHHHtMtt9ySyuYAAAC0exwWC+CYVFhYqOuuu04nn3yyJk6cqE8//VTLly9XTk5ObDrppJMkKXbo66ZNm/SLX/xCxx9/vPLy8jRgwABJ0rZt2+L2PWLEiJS2BQAAoCNwpbsCAJAsLpdLLlf4ba66uloTJkzQww8/3KJc9LDWCRMmqH///nrmmWfUu3dvhUIhDRkyRA0NDXHls7Ozk195AACADoZwCaBTOOOMM/Tqq69qwIABscDZVHl5uUpKSvTMM8/onHPOkSStWrUq1dUEAADosDgsFkCnMH36dO3bt0+/+MUv9PHHH2vz5s16++23NXXqVAWDQXXp0kXdunXT008/ra+//lrLli3TjBkz0l1tAACADoNwCaBT6N27t95//30Fg0GNHTtWp556qm699VYVFBTI4XDI4XBo8eLFWrNmjYYMGaLbbrtNc+fOTXe1AQAAOgyuFgsAAAAAsI2RSwAAAACAbYRLAAAAAIBthEsAAAAAgG2ESwAAAACAbYRLAAAAAIBthEsAAAAAgG2ESwAAAACAbYRLAAAAAIBthEsAAAAAgG2ESwAAAACAbYRLAAAAAIBthEsAAAAAgG3/H/4qtaKXudIGAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Los Angeles County followed a similar trend to state level data where aggrevated assult and robbery declined over time. Howver, Merced and San Joaquin County crime rate generally stayed the same when comparing year 2000 and year 2013 numbers. Some years were better than others but no concistent downward trending crime rate over time."
      ],
      "metadata": {
        "id": "HaSPUt23bw7H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Lets look at which cities in these counties have the highest crime rates"
      ],
      "metadata": {
        "id": "t-wr9cRlykcE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "top_city_county = df[(df['county_name'].isin(top_county)) & (df['geotype'] == 'PL')]\n",
        "\n",
        "top_city_county.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UlflUx5xykZO",
        "outputId": "549d65ef-b2d2-4634-ca52-fc3823a600ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     reportyear geotype  geotypevalue            geoname  county_fips  \\\n",
              "301        2000      PL         394.0  Agoura Hills city       6037.0   \n",
              "302        2000      PL         394.0  Agoura Hills city       6037.0   \n",
              "303        2000      PL         394.0  Agoura Hills city       6037.0   \n",
              "304        2000      PL         394.0  Agoura Hills city       6037.0   \n",
              "305        2000      PL         394.0  Agoura Hills city       6037.0   \n",
              "\n",
              "     county_name  region_code          region_name  strata_level_name_code  \\\n",
              "301  Los Angeles         14.0  Southern California                     1.0   \n",
              "302  Los Angeles         14.0  Southern California                     2.0   \n",
              "303  Los Angeles         14.0  Southern California                     3.0   \n",
              "304  Los Angeles         14.0  Southern California                     4.0   \n",
              "305  Los Angeles         14.0  Southern California                     5.0   \n",
              "\n",
              "                         strata_level_name  numerator  denominator      rate  \\\n",
              "301                     Aggravated assault         24        20537  1.168622   \n",
              "302                          Sexual assult          2        20537  0.097385   \n",
              "303  Murder and non-negligent manslaughter          0        20537       0.0   \n",
              "304                                Robbery         10        20537  0.486926   \n",
              "305                    Violent crime total         36        20537  1.752934   \n",
              "\n",
              "      ll_95ci   ul_95ci        se        rse  \n",
              "301  0.785469  1.738355  0.238405  20.400484  \n",
              "302  0.026707  0.355043  0.068858  70.707235  \n",
              "303  0.000000  0.187016       0.0        NaN  \n",
              "304  0.264518  0.896167  0.153942  31.615077  \n",
              "305  1.266516  2.425712  0.291899  16.652052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e135b979-d9dc-4330-8def-fd56ecebe951\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>301</th>\n",
              "      <td>2000</td>\n",
              "      <td>PL</td>\n",
              "      <td>394.0</td>\n",
              "      <td>Agoura Hills city</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>24</td>\n",
              "      <td>20537</td>\n",
              "      <td>1.168622</td>\n",
              "      <td>0.785469</td>\n",
              "      <td>1.738355</td>\n",
              "      <td>0.238405</td>\n",
              "      <td>20.400484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>302</th>\n",
              "      <td>2000</td>\n",
              "      <td>PL</td>\n",
              "      <td>394.0</td>\n",
              "      <td>Agoura Hills city</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>2</td>\n",
              "      <td>20537</td>\n",
              "      <td>0.097385</td>\n",
              "      <td>0.026707</td>\n",
              "      <td>0.355043</td>\n",
              "      <td>0.068858</td>\n",
              "      <td>70.707235</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>303</th>\n",
              "      <td>2000</td>\n",
              "      <td>PL</td>\n",
              "      <td>394.0</td>\n",
              "      <td>Agoura Hills city</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>0</td>\n",
              "      <td>20537</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.187016</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>304</th>\n",
              "      <td>2000</td>\n",
              "      <td>PL</td>\n",
              "      <td>394.0</td>\n",
              "      <td>Agoura Hills city</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>10</td>\n",
              "      <td>20537</td>\n",
              "      <td>0.486926</td>\n",
              "      <td>0.264518</td>\n",
              "      <td>0.896167</td>\n",
              "      <td>0.153942</td>\n",
              "      <td>31.615077</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305</th>\n",
              "      <td>2000</td>\n",
              "      <td>PL</td>\n",
              "      <td>394.0</td>\n",
              "      <td>Agoura Hills city</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>36</td>\n",
              "      <td>20537</td>\n",
              "      <td>1.752934</td>\n",
              "      <td>1.266516</td>\n",
              "      <td>2.425712</td>\n",
              "      <td>0.291899</td>\n",
              "      <td>16.652052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e135b979-d9dc-4330-8def-fd56ecebe951')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e135b979-d9dc-4330-8def-fd56ecebe951 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e135b979-d9dc-4330-8def-fd56ecebe951');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9408fc0f-f8aa-42e1-990c-1b3e8ade0837\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9408fc0f-f8aa-42e1-990c-1b3e8ade0837')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9408fc0f-f8aa-42e1-990c-1b3e8ade0837 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top_city_county",
              "summary": "{\n  \"name\": \"top_city_county\",\n  \"rows\": 7000,\n  \"fields\": [\n    {\n      \"column\": \"reportyear\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2009,\n          2011,\n          2000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"PL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotypevalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24577.36285316376,\n        \"min\": 394.0,\n        \"max\": 85292.0,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          69154.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geoname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"Santa Fe Springs city\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_fips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.644339667002406,\n        \"min\": 6037.0,\n        \"max\": 6077.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          6037.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Los Angeles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2999390008440161,\n        \"min\": 10.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"San Joaquin Valley\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.414314588451902,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Sexual assult\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numerator\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 810,\n        \"samples\": [\n          434\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"denominator\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 1383,\n        \"samples\": [\n          8479\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 6082,\n        \"samples\": [\n          0.8832086450540316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ll_95ci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.781811108459397,\n        \"min\": -3.469446951953614e-15,\n        \"max\": 702.8149970672775,\n        \"num_unique_values\": 6114,\n        \"samples\": [\n          3.227378420919224\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ul_95ci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.760835011317155,\n        \"min\": 0.019709305744465038,\n        \"max\": 865.123576656965,\n        \"num_unique_values\": 6637,\n        \"samples\": [\n          0.32224864046933815\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"se\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 6091,\n        \"samples\": [\n          0.10982447191824653\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rse\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 6094,\n        \"samples\": [\n          70.70877013905029\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 211
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# look at the median crime rate for all the cities in the counties with the highest crime rate. Use a histogram to view any outliers.\n",
        "\n",
        "city_rate = top_city_county[top_city_county['strata_level_name_code'] == 5].groupby('geoname')['rate'].median()\n",
        "\n",
        "#histogram\n",
        "city_rate.plot.hist(column='rate',figsize=(10,6), bins=20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 540
        },
        "id": "3Cza4MSeykWG",
        "outputId": "609dd76d-6d49-43a0-da1b-03a1ea4cdf13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 212
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# there are some outlier cities with crime rates that are absurdly high but our data shows that the majority of our data has crime rates well below 50.\n",
        "\n",
        "# find top 3 cities that exlude outliers\n",
        "\n",
        "x = top_city_county[(top_city_county['strata_level_name_code'] == 5) & (top_city_county['rate'] <50)].groupby('geoname')['rate'].median().sort_values(ascending=False).head(5)\n",
        "\n",
        "plt.barh(x.index, x.values)\n",
        "plt.xlabel('Crime rate per 1000')\n",
        "plt.ylabel('City')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "swPJgEoyykQK",
        "outputId": "998b9509-c42f-4bea-df5b-dde7bffa7489"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'City')"
            ]
          },
          "metadata": {},
          "execution_count": 213
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_city_county.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GhvQhmWvDzJQ",
        "outputId": "f6b74d57-7ecf-4c30-f857-33c38a47163c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     reportyear geotype  geotypevalue            geoname  county_fips  \\\n",
              "301        2000      PL         394.0  Agoura Hills city       6037.0   \n",
              "302        2000      PL         394.0  Agoura Hills city       6037.0   \n",
              "303        2000      PL         394.0  Agoura Hills city       6037.0   \n",
              "304        2000      PL         394.0  Agoura Hills city       6037.0   \n",
              "305        2000      PL         394.0  Agoura Hills city       6037.0   \n",
              "\n",
              "     county_name  region_code          region_name  strata_level_name_code  \\\n",
              "301  Los Angeles         14.0  Southern California                     1.0   \n",
              "302  Los Angeles         14.0  Southern California                     2.0   \n",
              "303  Los Angeles         14.0  Southern California                     3.0   \n",
              "304  Los Angeles         14.0  Southern California                     4.0   \n",
              "305  Los Angeles         14.0  Southern California                     5.0   \n",
              "\n",
              "                         strata_level_name  numerator  denominator      rate  \\\n",
              "301                     Aggravated assault         24        20537  1.168622   \n",
              "302                          Sexual assult          2        20537  0.097385   \n",
              "303  Murder and non-negligent manslaughter          0        20537       0.0   \n",
              "304                                Robbery         10        20537  0.486926   \n",
              "305                    Violent crime total         36        20537  1.752934   \n",
              "\n",
              "      ll_95ci   ul_95ci        se        rse  \n",
              "301  0.785469  1.738355  0.238405  20.400484  \n",
              "302  0.026707  0.355043  0.068858  70.707235  \n",
              "303  0.000000  0.187016       0.0        NaN  \n",
              "304  0.264518  0.896167  0.153942  31.615077  \n",
              "305  1.266516  2.425712  0.291899  16.652052  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4f7a8bc7-e61f-4aac-af07-e9bf2b9f6c5b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reportyear</th>\n",
              "      <th>geotype</th>\n",
              "      <th>geotypevalue</th>\n",
              "      <th>geoname</th>\n",
              "      <th>county_fips</th>\n",
              "      <th>county_name</th>\n",
              "      <th>region_code</th>\n",
              "      <th>region_name</th>\n",
              "      <th>strata_level_name_code</th>\n",
              "      <th>strata_level_name</th>\n",
              "      <th>numerator</th>\n",
              "      <th>denominator</th>\n",
              "      <th>rate</th>\n",
              "      <th>ll_95ci</th>\n",
              "      <th>ul_95ci</th>\n",
              "      <th>se</th>\n",
              "      <th>rse</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>301</th>\n",
              "      <td>2000</td>\n",
              "      <td>PL</td>\n",
              "      <td>394.0</td>\n",
              "      <td>Agoura Hills city</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Aggravated assault</td>\n",
              "      <td>24</td>\n",
              "      <td>20537</td>\n",
              "      <td>1.168622</td>\n",
              "      <td>0.785469</td>\n",
              "      <td>1.738355</td>\n",
              "      <td>0.238405</td>\n",
              "      <td>20.400484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>302</th>\n",
              "      <td>2000</td>\n",
              "      <td>PL</td>\n",
              "      <td>394.0</td>\n",
              "      <td>Agoura Hills city</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sexual assult</td>\n",
              "      <td>2</td>\n",
              "      <td>20537</td>\n",
              "      <td>0.097385</td>\n",
              "      <td>0.026707</td>\n",
              "      <td>0.355043</td>\n",
              "      <td>0.068858</td>\n",
              "      <td>70.707235</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>303</th>\n",
              "      <td>2000</td>\n",
              "      <td>PL</td>\n",
              "      <td>394.0</td>\n",
              "      <td>Agoura Hills city</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Murder and non-negligent manslaughter</td>\n",
              "      <td>0</td>\n",
              "      <td>20537</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.187016</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>304</th>\n",
              "      <td>2000</td>\n",
              "      <td>PL</td>\n",
              "      <td>394.0</td>\n",
              "      <td>Agoura Hills city</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Robbery</td>\n",
              "      <td>10</td>\n",
              "      <td>20537</td>\n",
              "      <td>0.486926</td>\n",
              "      <td>0.264518</td>\n",
              "      <td>0.896167</td>\n",
              "      <td>0.153942</td>\n",
              "      <td>31.615077</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305</th>\n",
              "      <td>2000</td>\n",
              "      <td>PL</td>\n",
              "      <td>394.0</td>\n",
              "      <td>Agoura Hills city</td>\n",
              "      <td>6037.0</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Southern California</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Violent crime total</td>\n",
              "      <td>36</td>\n",
              "      <td>20537</td>\n",
              "      <td>1.752934</td>\n",
              "      <td>1.266516</td>\n",
              "      <td>2.425712</td>\n",
              "      <td>0.291899</td>\n",
              "      <td>16.652052</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4f7a8bc7-e61f-4aac-af07-e9bf2b9f6c5b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4f7a8bc7-e61f-4aac-af07-e9bf2b9f6c5b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4f7a8bc7-e61f-4aac-af07-e9bf2b9f6c5b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-db844366-7682-4534-bf3a-074ac07e960f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-db844366-7682-4534-bf3a-074ac07e960f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-db844366-7682-4534-bf3a-074ac07e960f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top_city_county",
              "summary": "{\n  \"name\": \"top_city_county\",\n  \"rows\": 7000,\n  \"fields\": [\n    {\n      \"column\": \"reportyear\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2009,\n          2011,\n          2000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"PL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geotypevalue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24577.36285316376,\n        \"min\": 394.0,\n        \"max\": 85292.0,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          69154.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geoname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"Santa Fe Springs city\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_fips\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.644339667002406,\n        \"min\": 6037.0,\n        \"max\": 6077.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          6037.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"county_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Los Angeles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2999390008440161,\n        \"min\": 10.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"San Joaquin Valley\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.414314588451902,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"strata_level_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Sexual assult\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"numerator\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 810,\n        \"samples\": [\n          434\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"denominator\",\n      \"properties\": {\n        \"dtype\": \"Int64\",\n        \"num_unique_values\": 1383,\n        \"samples\": [\n          8479\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 6082,\n        \"samples\": [\n          0.8832086450540316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ll_95ci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.781811108459397,\n        \"min\": -3.469446951953614e-15,\n        \"max\": 702.8149970672775,\n        \"num_unique_values\": 6114,\n        \"samples\": [\n          3.227378420919224\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ul_95ci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.760835011317155,\n        \"min\": 0.019709305744465038,\n        \"max\": 865.123576656965,\n        \"num_unique_values\": 6637,\n        \"samples\": [\n          0.32224864046933815\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"se\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 6091,\n        \"samples\": [\n          0.10982447191824653\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rse\",\n      \"properties\": {\n        \"dtype\": \"Float64\",\n        \"num_unique_values\": 6094,\n        \"samples\": [\n          70.70877013905029\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 214
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lets view the types of crimes\n",
        "\n",
        "top_city = 'Compton city', 'Stockton city', 'Irwindale city'\n",
        "\n",
        "for city in top_city:\n",
        "    x = top_city_county[(top_city_county['geoname']==city) & (top_city_county['geotype']== 'PL') & (top_city_county['strata_level_name_code'] != 5)]\n",
        "    for name,group in x.groupby('strata_level_name'):\n",
        "        plt.plot(group['reportyear'], group['rate'], label = name)\n",
        "    plt.xlabel('Year')\n",
        "    plt.ylabel('Rate')\n",
        "    plt.title(f'Median Violent Crime Rate Type Between 2000-2013 in {city}')\n",
        "    plt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6z0XEc5s4Kfs",
        "outputId": "462fc1ba-56c0-4ace-fa92-b7a9609140df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "although Compton's robbery and aggravated assults were high, they have generally decreased since 2000 but picking up in 2013. Stockton on the other hand did not show much change in crime rate as the it seems to be a similar start and end at similar rates. Irwindale is erratic, most likely due to a smaller population (in the thousands) but showed high crime rates during certain years. Interestingly, in Irwindale, robber, murder/NNM, and sexual assault happened at the same rate in 2011."
      ],
      "metadata": {
        "id": "pzjYwv7GGmwO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# see where stockton and compton compare to the rest of our data\n",
        "\n",
        "#check for outliers again\n",
        "\n",
        "all_city= df[df['geotype'] == 'PL']\n",
        "\n",
        "all_city_rate = all_city[all_city['strata_level_name_code'] == 5].groupby('geoname')['rate'].median()\n",
        "\n",
        "#histogram\n",
        "all_city_rate.plot.hist(column='rate',figsize=(10,6), bins=30)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 540
        },
        "id": "TIyj80LyCzQ1",
        "outputId": "186c6d68-7a89-4282-e6b5-5837c27bac64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 216
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# pretty similar to our other histogam, lets take a look at the cities with the highest crime rates, excluding outliers.\n",
        "\n",
        "\n",
        "x = all_city[(all_city['strata_level_name_code'] == 5) & (all_city['rate'] <50)].groupby('geoname')['rate'].median().sort_values(ascending=False).head(5)\n",
        "\n",
        "plt.barh(x.index, x.values)\n",
        "plt.xlabel('Crime rate per 1000')\n",
        "plt.ylabel('City')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cngXmVxgCzOS",
        "outputId": "e6aa1291-58bb-4659-cfe1-a32f7a9d92a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'City')"
            ]
          },
          "metadata": {},
          "execution_count": 217
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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9u0lSadOnZLNZlNcXNxDHxcAAOQf9xUQJ0yYoOTk5CzbU1JS1KpVqwetST169ND//vc/LVq0SMePH9fatWvVokULXbp06YH7zg39+vXT6NGj1aVLF23dulVxcXEaP3681qxZoy+++EKS5OPjI19f30dem7+/v1xdXR/5uAAAIP+4r4C4fft23bhxI8v269eva+fOnQ9UUHJysnbu3Kl3331XLVu2VFBQkBo0aKBx48apc+fO9nbvv/++atWqJQ8PD5UpU0bDhg3TlStX7PujoqLk6+urjRs3qlq1avL09FS7du2UmJhob5Oenq6XXnpJvr6+Kl68uF555RVZlnXH+j777DMtWbJEy5Yt01//+lfVr19fwcHB6tKli7Zs2aKWLVtKunWKOfM0b3h4uLZv365Zs2bJZrPJZrMpISFBFStWzHKNZlxcnGw2m+Lj429bw8KFC1WjRg25uroqICBAI0aMsO+z2Wz209rlypWTdOu5lTabTS1atNCOHTvk7Oys8+fPG32OHj1aTZs2vePcAQBAwZCjgHjw4EEdPHhQlmXpyJEj9vcHDx7U//73P3388ccqVarUAxXk6ekpT09PrV69WqmpqbcvvFAhzZ49W998840WLVqkLVu26JVXXjHaXLt2TdOmTdPixYu1Y8cOnT592rizevr06YqKitLChQv13//+Vz/99JNWrVp1x/qWLFmiKlWqqEuXLln22Ww2+fj4ZNk+a9YsNWrUSEOGDFFiYqISExNVtmxZRUREKDIy0mgbGRmpZs2aqWLFitmOP2/ePA0fPlzPPfecDh06pLVr1962bWxsrCRp8+bNSkxM1MqVK9WsWTOVL19eixcvtrdLS0vTkiVLFBERkW0/qampSklJMV4AACD/ytFNKk899ZR9BSy7U8nu7u764IMPHqwgJydFRUVpyJAhmj9/vurWravmzZvr2WefVe3ate3tfns9X3BwsN5++209//zzmjt3rn17Wlqa5s+frwoVKkiSRowYoTfffNO+f+bMmRo3bpy6d+8uSZo/f742btx4x/pOnDihKlWq5GhOPj4+cnFxUZEiReTv72/fHh4erjfeeEOxsbFq0KCB0tLStHTp0jve+f3222/r5Zdf1qhRo+zbbnczUOb1ocWLFzfGHTRokCIjIzV27FhJ0rp163T9+nWFhYVl28/kyZM1adKke58wAADI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AREAAAAGAiIAAAAMBEQAAAAYCIgAAAAwEBABAABgICACAADAQEAEAACAgYCYj0RFRcnX19fRZQAAgDwuTwTE8+fP68UXX1T58uXl6uqqMmXKqFOnToqJiXF0aTp16pRsNpvi4uIcXYp69eql48eP299PnDhRTz31lOMKAgAAeZKTowu4m1OnTqlJkyby9fXVe++9p1q1aiktLU0bN27U8OHD9e233zq6xMeGu7u73N3dHV0GAADI4x77FcRhw4bJZrMpNjZWPXr0UOXKlVWjRg299NJL2r17t73d6dOn1aVLF3l6esrb21thYWG6cOGCfX/matrChQtVtmxZeXp6atiwYUpPT9fUqVPl7+8vPz8/vfPOO8b4NptN8+bNU/v27eXu7q7y5cvrX//6l31/uXLlJEl16tSRzWZTixYtJEkZGRl68803Vbp0abm6uuqpp55SdHS0/bjMlceVK1eqZcuWKlKkiJ588kl99dVXd/w8kpOTNXToUJUsWVJubm6qWbOm1q9fL8k8xRwVFaVJkybpwIEDstlsstlsioqKUkREhDp27Gj0mZaWJj8/P3388cf3+FMBAAD52WO9gvjTTz8pOjpa77zzjjw8PLLszwxDGRkZ9nC4fft23bx5U8OHD1evXr20bds2e/uTJ09qw4YNio6O1smTJ/WnP/1J3333nSpXrqzt27fryy+/VEREhNq0aaOGDRvajxs/frymTJmiWbNmafHixXr22Wd16NAhVatWTbGxsWrQoIE2b96sGjVqyMXFRZI0a9YsTZ8+XQsWLFCdOnW0cOFCde7cWd98840qVapk7/v111/XtGnTVKlSJb3++uvq3bu34uPj5eSU9UeTkZGh9u3b65dfftGnn36qChUq6MiRIypcuHCWtr169dLhw4cVHR2tzZs3S5J8fHxUuXJlNWvWTImJiQoICJAkrV+/XteuXVOvXr2y/TmkpqYqNTXV/j4lJeV2PzIAAJAPPNYBMT4+XpZlqWrVqndsFxMTo0OHDikhIUFlypSRJH3yySeqUaOG9u7dq/r160u6FbAWLlwoLy8vVa9eXS1bttSxY8f0n//8R4UKFVKVKlX07rvvauvWrUZA7NmzpwYPHixJeuutt7Rp0yZ98MEHmjt3rkqUKCFJKl68uPz9/e3HTJs2Ta+++qqeffZZSbL3O3PmTM2ZM8febsyYMerQ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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Stockton and compton both make the top 5, but oakland comes in at #1. Emeryville is just noth of oakland which could explain the higher crime rate as there could be spill over. Sand City however has a high crime rate but their population is very low compared to the others on this list."
      ],
      "metadata": {
        "id": "bEF0_jdQPp_6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hypothesis Testing"
      ],
      "metadata": {
        "id": "iDKTdZMs0WKA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# creating data frame with southern california totals (sc)\n",
        "\n",
        "sc = df[(df['region_name'] == 'Southern California') & (df['geotype'] == 'RE') & (df['strata_level_name_code'] == 5)]['rate']\n",
        "\n",
        "# creating data frame with bay area totals (ba)\n",
        "ba = df[(df['region_name'] == 'Bay Area') & (df['geotype'] == 'RE') & (df['strata_level_name_code'] == 5)]['rate']"
      ],
      "metadata": {
        "id": "GrGGhjPSf-DL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# We will use the Mann-Whitney U non-parametric test since these observations are not normally distributed and independent.\n",
        "\n",
        "# H0: crime rate per 1000 is the same between southern california and bay area (H0: sc = ba)\n",
        "# Ha: crime rate per 1000 is the different between southern california and bay area (Ha: sc != ba)\n",
        "\n",
        "import scipy.stats as stats\n",
        "\n",
        "statistic, p_value = stats.mannwhitneyu(sc,ba)\n",
        "\n",
        "if p_value < 0.05:\n",
        "    print(f'The p-value is {p_value:.6}, meaning there is a statistical difference between groups. Thus, we can reject the null hypothesis.')\n",
        "else:\n",
        "    print(f'The p-value is {p_value:.6}, meaning there is not enough statistical evidence to prove a difference between groups. Thus, we fail to reject the null hypothesis.')"
      ],
      "metadata": {
        "id": "0GVlNYRvf-AR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ab949ac0-5654-4e45-f575-418094f06b48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The p-value is 0.395307, meaning there is not enough statistical evidence to prove a difference between groups. Thus, we fail to reject the null hypothesis.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We do not have enough evidence to reject the null hypothesis of southern california's crime rate is the same as the bay area's crime rate. This means that the two regions actually do have similar crime rates and any observed differences between the two are not statistically significant."
      ],
      "metadata": {
        "id": "fMvVlMxzt_rg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# what about comparing cities from our graph above? lets compare some of the biggest counties to each other. Oakland, Stockton, and Compton\n",
        "\n",
        "#create a dataframe for each city\n",
        "\n",
        "oak = df[(df['geoname'] == 'Oakland city') & (df['geotype'] == 'PL') & (df['strata_level_name_code'] == 5)]['rate']\n",
        "\n",
        "stkt = df[(df['geoname'] == 'Stockton city') & (df['geotype'] == 'PL') & (df['strata_level_name_code'] == 5)]['rate']\n",
        "\n",
        "comp = df[(df['geoname'] == 'Compton city') & (df['geotype'] == 'PL') & (df['strata_level_name_code'] == 5)]['rate']"
      ],
      "metadata": {
        "id": "NUAYPfGd3JXn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# perform kruskal-wallis test to compare across cities\n",
        "\n",
        "statistic, pvalue = stats.kruskal(oak,stkt,comp)\n",
        "\n",
        "# Set up hypothesis statment:\n",
        "\n",
        "# H0: The crime rate is the same between oakland, stockton and compton.\n",
        "# Ha: The crime rate is different between oakland, stockton and compton.\n",
        "\n",
        "if pvalue < 0.05:\n",
        "    print(f'The p-value is {pvalue:.6}, meaning there is a statistical difference between groups. Thus, we can reject the null hypothesis.')\n",
        "else:\n",
        "    print(f'The p-value is {pvalue:.6}, meaning there is not enough statistical evidence to prove a difference between groups. Thus, we fail to reject the null hypothesis.')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PGcEKXMmbh-f",
        "outputId": "dfd11618-6aac-4071-9ede-e8b09ade90f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The p-value is 0.0375384, meaning there is a statistical difference between groups. Thus, we can reject the null hypothesis.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After doing the Kruskal-Wallis test we found that there is a statistical significance between two of the group's medians, allowing us to reject the null hypothesis in favor of the alternative hypothesis. The crime rate across the three counties are differtent. But which county is different? We will explore below."
      ],
      "metadata": {
        "id": "XXq9FUATbgpu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# we can determine which group is different from the others with a post hoc test.\n",
        "\n",
        "# install posthoc package and import\n",
        "!pip install scikit-posthocs\n",
        "import scikit_posthocs as sp\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-OUtnKzBh4Gm",
        "outputId": "15fb236b-a3a9-4bd2-f7e2-c74ee8c04f62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scikit-posthocs in /usr/local/lib/python3.11/dist-packages (0.11.4)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from scikit-posthocs) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.9.0 in /usr/local/lib/python3.11/dist-packages (from scikit-posthocs) (1.15.3)\n",
            "Requirement already satisfied: statsmodels in /usr/local/lib/python3.11/dist-packages (from scikit-posthocs) (0.14.4)\n",
            "Requirement already satisfied: pandas>=0.20.0 in /usr/local/lib/python3.11/dist-packages (from scikit-posthocs) (2.2.2)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (from scikit-posthocs) (0.13.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from scikit-posthocs) (3.10.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.20.0->scikit-posthocs) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.20.0->scikit-posthocs) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.20.0->scikit-posthocs) (2025.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->scikit-posthocs) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->scikit-posthocs) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->scikit-posthocs) (4.58.4)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->scikit-posthocs) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->scikit-posthocs) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->scikit-posthocs) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->scikit-posthocs) (3.2.3)\n",
            "Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.11/dist-packages (from statsmodels->scikit-posthocs) (1.0.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=0.20.0->scikit-posthocs) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# make list of each group's crime rate so it can be passed in post hoc function\n",
        "data = [oak,stkt,comp]\n",
        "\n",
        "# run post hoc analysis\n",
        "sp.posthoc_dunn(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "l6OifPTImZnE",
        "outputId": "ef68935c-d672-46b0-a41e-566483cb51af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          1         2         3\n",
              "1  1.000000  0.024507  0.950866\n",
              "2  0.024507  1.000000  0.028709\n",
              "3  0.950866  0.028709  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5a5ab0e8-23d3-4f5f-8a1f-0a45b85e3ec4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.024507</td>\n",
              "      <td>0.950866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.024507</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.028709</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.950866</td>\n",
              "      <td>0.028709</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a5ab0e8-23d3-4f5f-8a1f-0a45b85e3ec4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5a5ab0e8-23d3-4f5f-8a1f-0a45b85e3ec4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5a5ab0e8-23d3-4f5f-8a1f-0a45b85e3ec4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f7c38dd2-a23e-4317-bdc7-dee46ef9abf8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f7c38dd2-a23e-4317-bdc7-dee46ef9abf8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f7c38dd2-a23e-4317-bdc7-dee46ef9abf8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"sp\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5495667786300888,\n        \"min\": 0.024507180587840394,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.0,\n          0.024507180587840394,\n          0.9508664628570107\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5619921204431824,\n        \"min\": 0.024507180587840394,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.024507180587840394,\n          1.0,\n          0.028708608128702906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5471435188675482,\n        \"min\": 0.028708608128702906,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.9508664628570107,\n          0.028708608128702906,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 223
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the above table, group 1 is Oakland, group 2 is Stocton, and group 3 is Compton. We see that Oakland's adjusted p- vlaue is different than Stockton's (less than 0.05) and Compton's's is different than Stockton's. This means Oakland and Compton have statistically different crime rates when compared to Stockton's."
      ],
      "metadata": {
        "id": "UZmlEAbYnniS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(f'Oakland: {oak.mean():.4f}')\n",
        "print(f'Stockton: {stkt.mean():.4f}')\n",
        "print(f'Compton: {comp.mean():.4f}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ikt4rGjYnnHJ",
        "outputId": "696c5065-cc29-47f1-9017-24ff45f4a299"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Oakland: 16.2443\n",
            "Stockton: 13.8570\n",
            "Compton: 15.9647\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The above medians help give more context. Oakland and Compton have similar crime rates while Stockton's is lower. Putting everything together we can see there is less crime in Stockton than the other two counties, less enough that it is statistically significant and not due to random chance."
      ],
      "metadata": {
        "id": "6QDMZdbVSHUB"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "BZHLUem0wJhF"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}